Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/ThrusterSmall3Way"
	IconNameKey = "Parts/ThrusterSmall3WayIcon"
	ID = cosmoteer.thruster_small_3way // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Flight"
	DescriptionKey = "Parts/ThrusterSmall3WayDesc"
	Resources
	[
		[steel, 16]
		[coil, 11]
	]
	TypeCategories = [thruster, uses_power]
	Size = [3, 2]
	PhysicalRect = [1, 0, 1, 1]
	SaveRect = &PhysicalRect
	BoundingRectType = Physical
	SelectionPriority = 1
	SelectionTypeByRotation = true
	SelectionTypeRotations = [0, 1, 3]
	SelectionTypeID = "thrusters"
	MaxHealth = 1000
	ProhibitRects
	[
		[default, [1, 2, 1, 3]]
		[default, [3, 0, 3, 1]]
		[default, [-3, 0, 3, 1]]
	]
	ThrusterForce = 400
	ThrustIncreaseTime = 0
	ThrustDecreaseTime = 0
	ThrustRecoveryTime = 0
	FuelUsage = 30
	ReceivableBuffs : ^/0/ReceivableBuffs [Engine, EnginePowerDistribution]
	AllowedDoorLocations
	[
		[1, -1]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 42.66]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 3
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 1000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}

		PowerDistributionBuffToggle
		{
			Type = BuffToggle
			BuffType = EnginePowerDistribution
		}
		ToggledBatteryConsumer
		{
			Type = ToggledComponents
			Toggle = PowerDistributionBuffToggle
			Invert = true
			IncludeInBlueprints = true
			Components
			{
				BatteryConsumer
				{
					Type = ResourceConsumer
					ResourceType = battery
					Storage = BatteryStorage
					DefaultPriority = &/PRIORITIES/Thruster_Supply
					ResupplyThreshold = 500
					OperationalToggle = PowerToggle
				}
			}
		}

		ThrusterAnimationSpeed
		{
			Type = MultiValue
			Values = [MainThrusterBottom, MainThrusterRight, MainThrusterLeft]
			Mode = Max
		}
		Graphics
		{
			Type = Graphics
			Location = [1.5, .5]
			OperationalToggle = IsOperational
			AnimationSpeedFactor = ThrusterAnimationSpeed
			AnimationSpeedFactorRenormalize = [0.75, 2.0]
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [1, 1]
					}
					{
						File = "floor_33.png"
						Size = [1, 1]
					}
					{
						File = "floor_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [1, 1]
					}
					{
						File = "doodads_off_33.png"
						Size = [1, 1]
					}
					{
						File = "doodads_off_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				Offset = [0, .5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights.png"
							"lights2.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [1, 1]
					}
					{
						File = "walls_33.png"
						Size = [1, 1]
					}
					{
						File = "walls_66.png"
						Size = [1, 1]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [1, 1]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [1, 1]
					}
				]
			}

			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [1, 1]
					}
					{
						File = "roof_glows_33.png"
						Size = [1, 1]
					}
					{
						File = "roof_glows_66.png"
						Size = [1, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [1.7, 1.7]
						Z = 1.0 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [255*1.0,116*1.0, 24*1.0]
					}
				]
			}
		}
		NozzleGraphics
		{
			Type = Graphics
			Location = [1.5, 1]
			Floor
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "nozzle.png"
						NormalsFile = "nozzle_normals.png"
						Size = [2, 2]
					}
					{
						File = "nozzle_33.png"
						NormalsFile = "nozzle_normals.png"
						Size = [2, 2]
					}
					{
						File = "nozzle_66.png"
						NormalsFile = "nozzle_normals.png"
						Size = [2, 2]
					}
				]
			}
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, .5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = false
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
			]
		}

		MainThrusterBottom
		{
			Type = Thruster
			Location = [1.5, 1.5] // Relative to upper-left corner of unrotated part.
			Rotation = 90d // Relative to unrotated part.
			SoftOperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = -0.05
			MaxActivation = { BaseValue=1; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationDecreaseTime = &../../ThrustDecreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		RampProgressBarBottom
		{
			Type = ProgressBar
			ShowProgressFor = MainThrusterBottom
			ValueRange = [0, &~/Part/Components/MainThrusterBottom/MaxActivation]
			LowColor = [255, 127, 0]
			HighColor = [255, 127, 0]
			FullColor = [255, 127, 0]
		}

		NozzleColliderBottom
		{
			Type = PolygonCollider
			Vertices
			[
				[1.2, 1]
				[1.8, 1]
				[1.875, 1.45]
				[1.125, 1.45]
			]
			Density = 1
		}

		ThrustEffectsBottom
		{
			Type = ContinuousEffects
			ChainedTo = MainThrusterBottom
			Location = [-2/64, 0]
			FactorMediaEffectsIntensityWith = MainThrusterBottom
			IntensityTweenDuration = 0.1
			MinMediaEffectsIntensity = 1%
			MediaEffects
			[
				&<../thruster_small/particles/thruster_plume_small.rules>
				&<../thruster_small/particles/thruster_plume_light_small.rules>
				&<../thruster_small/particles/thruster_sparks_small.rules>
				&<../thruster_small/particles/thruster_fire_small.rules>
				&<../thruster_small/particles/thruster_smoke_small.rules>

				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .075
					Speed = 2
					MaxConcurrentVolume = .15
				}
			]
		}

		BurstTriggerBottom
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterBottom
			MinAmount = .5
		}

		BurstEffectsBottom
		{
			Type = TriggeredEffects
			ChainedTo = MainThrusterBottom
			Trigger = BurstTriggerBottom
			FactorMediaEffectsIntensityWith = MainThrusterBottom
			MinMediaEffectsIntensity = 1%
			AnchorMediaEffects = true
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterBurst
				{
					Volume = .125
					Speed = 2
					MaxConcurrentVolume = .25
				}
			]
		}

		MainThrusterRight
		{
			Type = Thruster
			Location = [2.5, 0.5] // Relative to upper-left corner of unrotated part.
			Rotation = 0d // Relative to unrotated part.
			SoftOperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=1; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationDecreaseTime = &../../ThrustDecreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		RampProgressBarRight
		{
			Type = ProgressBar
			ShowProgressFor = MainThrusterRight
			ValueRange = [0, &~/Part/Components/MainThrusterRight/MaxActivation]
			LowColor = [255, 127, 0]
			HighColor = [255, 127, 0]
			FullColor = [255, 127, 0]
		}

		NozzleColliderRight
		{
			Type = PolygonCollider
			Vertices
			[
				[2, .8]
				[2, .2]
				[2.45, .125]
				[2.45, .875]
			]
			Density = 1
		}

		ThrustEffectsRight
		{
			Type = ContinuousEffects
			ChainedTo = MainThrusterRight
			Location = [-2/64, 0]
			FactorMediaEffectsIntensityWith = MainThrusterRight
			IntensityTweenDuration = 0.1
			MinMediaEffectsIntensity = 1%
			MediaEffects
			[
				&<../thruster_small/particles/thruster_plume_small.rules>
				&<../thruster_small/particles/thruster_plume_light_small.rules>
				&<../thruster_small/particles/thruster_sparks_small.rules>
				&<../thruster_small/particles/thruster_fire_small.rules>
				&<../thruster_small/particles/thruster_smoke_small.rules>

				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .075
					Speed = 2
					MaxConcurrentVolume = .15
				}
			]
		}

		BurstTriggerRight
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterRight
			MinAmount = .5
		}

		BurstEffectsRight
		{
			Type = TriggeredEffects
			ChainedTo = MainThrusterRight
			Trigger = BurstTriggerRight
			FactorMediaEffectsIntensityWith = MainThrusterRight
			MinMediaEffectsIntensity = 1%
			AnchorMediaEffects = true
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterBurst
				{
					Volume = .125
					Speed = 2
					MaxConcurrentVolume = .25
				}
			]
		}

		MainThrusterLeft
		{
			Type = Thruster
			Location = [0.5, 0.5] // Relative to upper-left corner of unrotated part.
			Rotation = 180d // Relative to unrotated part.
			SoftOperationalToggle = IsOperational
			Force = &../../ThrusterForce
			MinActivation = 0
			MaxActivation = { BaseValue=1; BuffType=Engine; BuffMode=Multiply; }
			MinUncommandedActivation = &MinActivation
			MaxUncommandedActivation = &MaxActivation
			ActivationIncreaseTime = &../../ThrustIncreaseTime
			ActivationDecreaseTime = &../../ThrustDecreaseTime
			ActivationRecoveryTime = &../../ThrustRecoveryTime
			FuelStorage = BatteryStorage
			FuelUsagePerSecond = &../../FuelUsage
		}

		RampProgressBarLeft
		{
			Type = ProgressBar
			ShowProgressFor = MainThrusterLeft
			ValueRange = [0, &~/Part/Components/MainThrusterLeft/MaxActivation]
			LowColor = [255, 127, 0]
			HighColor = [255, 127, 0]
			FullColor = [255, 127, 0]
		}

		NozzleColliderLeft
		{
			Type = PolygonCollider
			Vertices
			[
				[1, .2]
				[1, .8]
				[.55, .875]
				[.55, .125]
			]
			Density = 1
		}

		ThrustEffectsLeft
		{
			Type = ContinuousEffects
			ChainedTo = MainThrusterLeft
			Location = [-2/64, 0]
			FactorMediaEffectsIntensityWith = MainThrusterLeft
			IntensityTweenDuration = 0.1
			MinMediaEffectsIntensity = 1%
			MediaEffects
			[
				&<../thruster_small/particles/thruster_plume_small.rules>
				&<../thruster_small/particles/thruster_plume_light_small.rules>
				&<../thruster_small/particles/thruster_sparks_small.rules>
				&<../thruster_small/particles/thruster_fire_small.rules>
				&<../thruster_small/particles/thruster_smoke_small.rules>

				: /COMMON_SOUNDS/ThrusterRumble
				{
					Volume = .075
					Speed = 2
					MaxConcurrentVolume = .15
				}
			]
		}

		BurstTriggerLeft
		{
			Type = ThresholdTrigger
			AmountFrom = MainThrusterLeft
			MinAmount = .5
		}

		BurstEffectsLeft
		{
			Type = TriggeredEffects
			ChainedTo = MainThrusterLeft
			Trigger = BurstTriggerLeft
			FactorMediaEffectsIntensityWith = MainThrusterLeft
			MinMediaEffectsIntensity = 1%
			AnchorMediaEffects = true
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterBurst
				{
					Volume = .125
					Speed = 2
					MaxConcurrentVolume = .25
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, .5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/SmallPartDestroyed
			Location = [1.5, .5]
		}

		ThrusterHum
		{
			Type = ContinuousEffects
			Location = [1.5, .5]
			OperationalToggle = IsOperational
			MaxMediaEffectsZoom = 4
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .05
					Speed = 1.5
					MaxConcurrentVolume = 1
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 0.5]
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
					HidesIndicators = [1]
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 2]
		}
	}

	Stats
	{
		ThrusterForce = &~/Part/ThrusterForce
		ThrusterRampUp = &~/Part/ThrustIncreaseTime
		ThrusterRampDown = &~/Part/ThrustDecreaseTime
		ThrusterPowerUsage = (&~/Part/FuelUsage) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = (&ThrusterPowerUsage) / 2
		RecCrew = (&RecPower) * 4
	}
}