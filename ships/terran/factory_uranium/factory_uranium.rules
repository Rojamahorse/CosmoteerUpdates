Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/FactoryUranium"
	IconNameKey = "Parts/FactoryUraniumIcon"
	ID = cosmoteer.factory_uranium // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Production"
	DescriptionKey = "Parts/FactoryUraniumDesc"
	Resources
	[
		[steel, 80]
		[coil2, 80]
		[enriched_uranium, 32]
	]
	Size = [3, 4]
	IsFlippable = true
	SelectionPriority = 1
	MaxHealth = 12000
	TypeCategories = [provides_enriched_uranium, uses_uranium, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [Factory]
	AllowedDoorLocations
	[
		[-1, 2]
		[-1, 3]
		[0, 4]
		[1, 4]
		[2, 4]
		[3, 3]
		[3, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [48, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, UraniumPrereq, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		UraniumStorage
		{
			Type = TypedResourceGrid
			ResourceType = uranium
			GridRect = [0, 2, 2, 2]
			Layer = "doodads_low"
			SpriteInset = [8/64, 6/64, 2/64, 9/64]
			ToggleOnResources = &../UraniumLoader/FromQuantity
			ToggleOffResources = (&ToggleOnResources) - 1
			RandomSpriteRotation = true
		}
		UraniumConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = uranium
			Storage = UraniumStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}

		EnrichedUraniumStorage
		{
			Type = TypedResourceGrid
			ResourceType = enriched_uranium
			GridRect = [2, 2, 1, 2]
			Layer = "doodads_low"
			SpriteInset = [2/64, 6/64, 15/64, 9/64]
			SuppliesResources = true
			SupplyToggleButtonOffset = [0, -.4]
			RandomSpriteRotation = true
			InitToMaxResources = 0
			AllowExternalPickupAndDelivery = true
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		UraniumPrereq
		{
			Type = MultiToggle
			Toggles = [UraniumStorage, LoadedUranium]
			Mode = Any
		}

		LoadedUranium
		{
			Type = ResourceStorage
			OperationalToggle = IsOperational
			ResourceType = fake
			MaxResources = (&../ResourceConverter/From/0/Quantity) + 1		//Need to be +1 so the UraniumLoader dont need to momentarily stop after loading the LoadedUranium
			StartingAmmo = 0
			ToggleOnResources = &../ResourceConverter/From/0/Quantity
			ToggleOffResources = (&ToggleOnResources) - 1
		}

		AnimationToggle
		{
			Type = MultiToggle
			Toggles = [UraniumLoader, ResourceConverter]
			Mode = Any
		}

		UraniumLoader
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = UraniumStorage
			FromQuantity = 1
			ToStorage = LoadedUranium
			ToQuantity = 1
			Interval = { BaseValue=1.5; BuffType=Factory; BuffMode=Divide; }
		}

		ResourceConverter
		{
			Type = ResourceConverter
			OperationalToggle = LoadedUranium
			From
			[
			    {
			        Storage = LoadedUranium
			        Quantity = 4
			    }
			    {
			        Storage = BatteryStorage
			        Quantity = 1000
			        MinQuantityForConversion = 1
			    }
			]
			ToStorage = EnrichedUraniumStorage
			ToQuantity = 1
			Interval = 0.75
			CheckResourceLimits = true
		}

		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = UraniumLoader
			Location = [1.5, 2]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "../factory_ammo/bullet_create.wav"
					Volume = .1
					Speed = .5
					SpeedVariation = .05
				}
			]
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Factory
			BuffAmount = 25%
			GridDistance = 1
			OperationalToggle = BatteryStorage
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 2]
			OperationalToggle = IsOperational
			DoodadToggle = AnimationToggle
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 4]
					}
					{
						File = "floor_33.png"
						Size = [3, 4]
					}
					{
						File = "floor_66.png"
						Size = [3, 4]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -60/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.125
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -60/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_idle1.png"
							"doodads_idle2.png"
							"doodads_idle3.png"
							"doodads_idle4.png"
							"doodads_idle5.png"
							"doodads_idle6.png"
							"doodads_idle7.png"
							"doodads_idle8.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.125
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"doodads_idle1_33.png"
							"doodads_idle2_33.png"
							"doodads_idle3_33.png"
							"doodads_idle4_33.png"
							"doodads_idle5_33.png"
							"doodads_idle6_33.png"
							"doodads_idle7_33.png"
							"doodads_idle8_33.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.125
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"doodads_idle1_66.png"
							"doodads_idle2_66.png"
							"doodads_idle3_66.png"
							"doodads_idle4_66.png"
							"doodads_idle5_66.png"
							"doodads_idle6_66.png"
							"doodads_idle7_66.png"
							"doodads_idle8_66.png"
						]
						Size = [3, 2]
						AnimationInterval = 0.125
						AnimationStartTime = WhenSpawned
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -60/64]
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [3, 2]
					}
					{
						File = "doodads_off_33.png"
						Size = [3, 2]
					}
					{
						File = "doodads_off_66.png"
						Size = [3, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 4]
					}
					{
						File = "walls_33.png"
						Size = [3, 4]
					}
					{
						File = "walls_66.png"
						Size = [3, 4]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 4]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [-54/64, -57/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [4, 4]
						Z = .5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.4, 0, 0]
					}
				]
			}
		}

		NuggetGraphics
		{
			Type = Graphics
			Location = [23/64, .5]
			OperationalToggle = IsOperational
			DoodadToggle = UraniumLoader
			ToggleOnDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"uranium12.png"
							"uranium11.png"
							"uranium10.png"
							"uranium9.png"
							"uranium8.png"
							"uranium7.png"
							"uranium6.png"
							"uranium5.png"
							"uranium4.png"
							"uranium3.png"
							"uranium2.png"
							"uranium1.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.125
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [126/64, 40/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [4, 4]
						Z = .5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.4, 0, 0]
					}
				]
			}
		}

		LoadedUraniumIndicatorSprites
		{
			Type = ResourceSprites
			Location = [127/64, 121/64]
			ResourceStorage = LoadedUranium
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "loaded_uranium_indicator1.png"
					Size = [1, 1]
				}
				{
					File = "loaded_uranium_indicator2.png"
					Size = [1, 1]
				}
				{
					File = "loaded_uranium_indicator3.png"
					Size = [1, 1]
				}
				{
					File = "loaded_uranium_indicator4.png"
					Size = [1, 1]
				}
				{
					File = "loaded_uranium_indicator4.png"
					Size = [1, 1]
				}
			]
		}

		EnrichedUraniumGraphics
		{
			Type = Graphics
			Location = [127/64, 121/64]
			DoodadToggle = ResourceConverter
			ToggleOnDoodad
			{
				Layer = "walls" //Wall layer so the enriched uranium is show on top of the exit belt which use the doodad_low layer and under the crew sprite
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_enriched_uranium1.png"
							"doodads_enriched_uranium2.png"
							"doodads_enriched_uranium3.png"
							"doodads_enriched_uranium4.png"
							"doodads_enriched_uranium5.png"
							"doodads_enriched_uranium6.png"
						]
						Size = [1, 1]
						AnimationInterval = 0.125
					}
				]
			}
		}

		RoofDoorOpenToggle
		{
			Type = CrewDestinationProximityToggle
			Distance = 3
		}
		RoofDoorSprite
		{
			Type = OpenCloseSprite
			Location = [1.5, 2]
			OperationalToggle = RoofDoorOpenToggle
			Layer = "roofs"
			OpenDamageLevels
			[
				{
					AnimationFiles
					[
						"roof1.png"
						"roof2.png"
						"roof3.png"
						"roof4.png"
						"roof5.png"
						"roof6.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1.png"
						"roof_normals2.png"
						"roof_normals3.png"
						"roof_normals4.png"
						"roof_normals5.png"
						"roof_normals6.png"
					]
					Size = [3, 4]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof1_33.png"
						"roof2_33.png"
						"roof3_33.png"
						"roof4_33.png"
						"roof5_33.png"
						"roof6_33.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1_33.png"
						"roof_normals2_33.png"
						"roof_normals3_33.png"
						"roof_normals4_33.png"
						"roof_normals5_33.png"
						"roof_normals6_33.png"
					]
					Size = [3, 4]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof1_66.png"
						"roof2_66.png"
						"roof3_66.png"
						"roof4_66.png"
						"roof5_66.png"
						"roof6_66.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1_66.png"
						"roof_normals2_66.png"
						"roof_normals3_66.png"
						"roof_normals4_66.png"
						"roof_normals5_66.png"
						"roof_normals6_66.png"
					]
					Size = [3, 4]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
			ClosedDamageLevels
			[
				{
					AnimationFiles
					[
						"roof6.png"
						"roof5.png"
						"roof4.png"
						"roof3.png"
						"roof2.png"
						"roof1.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6.png"
						"roof_normals5.png"
						"roof_normals4.png"
						"roof_normals3.png"
						"roof_normals2.png"
						"roof_normals1.png"
					]
					Size = [3, 4]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof6_33.png"
						"roof5_33.png"
						"roof4_33.png"
						"roof3_33.png"
						"roof2_33.png"
						"roof1_33.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6_33.png"
						"roof_normals5_33.png"
						"roof_normals4_33.png"
						"roof_normals3_33.png"
						"roof_normals2_33.png"
						"roof_normals1_33.png"
					]
					Size = [3, 4]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof6_66.png"
						"roof5_66.png"
						"roof4_66.png"
						"roof3_66.png"
						"roof2_66.png"
						"roof1_66.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6_66.png"
						"roof_normals5_66.png"
						"roof_normals4_66.png"
						"roof_normals3_66.png"
						"roof_normals2_66.png"
						"roof_normals1_66.png"
					]
					Size = [3, 4]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
		}


		BatterySprites
		{
			Type = ResourceSprites
			Location = [54/64, 78/64]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
				{
					File = "batteries3.png"
					Size = [1, 1]
				}
				{
					File = "batteries4.png"
					Size = [1, 1]
				}
			]
		}


		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 2]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			Location = [1.5, 2]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 200000
					Radius = 10
					ExpandDuration = .8
					ExpandStartRadius = 1
					RadiusEffectScaleExponent = 0.5
					ImpulsePerNDamage = 10
					NDamage = 1000
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 60000
					Radius = 8
					ExpandDuration = .8
					ExpandStartRadius = 1
					RadiusEffectScaleExponent = 0.5
					ImpulsePerNDamage = 5
					NDamage = 1000
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
					}
				}
			]

			MediaEffects
			[
				&<./Data/shots/missile_nuke/particles/missile_nuke_flash.rules>
				&<./Data/shots/missile_nuke/particles/missile_nuke_shockwave.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/shots/missile_nuke/missile_nuke_hit.wav"
					Volume = 1
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .15
					Duration = .75
				}
			]
		}

		DestroyedEffects2 // A separate destroyed effects for the base destruction that doesn't get scale with ammo.
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/HugePartDestroyed
			Location = [1.5, 2]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 2]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// No uranium.
				{
					Toggle = UraniumPrereq
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 4]
		}
	}

	Stats
	{
		Interval = (&~/Part/Components/UraniumLoader/Interval/BaseValue) * (&~/Part/Components/ResourceConverter/From/0/Quantity)
		EnrichedUraniumProduction = (&~/Part/Components/ResourceConverter/ToQuantity) / (&Interval)
		EnrichedUraniumCapacity = (&~/Part/Components/EnrichedUraniumStorage/GridRect/2) * (&~/Part/Components/EnrichedUraniumStorage/GridRect/3) * (&<./Data/resources/enriched_uranium/enriched_uranium.rules>/MaxStackSize)
		UraniumCapacity = (&~/Part/Components/UraniumStorage/GridRect/2) * (&~/Part/Components/UraniumStorage/GridRect/3) * (&<./Data/resources/uranium/uranium.rules>/MaxStackSize)
		UraniumPerEnriched = (&~/Part/Components/ResourceConverter/From/0/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		UraniumPerSecond = (&~/Part/Components/ResourceConverter/From/0/Quantity) / (&Interval)
		EnrichedUraniumUraniumUsage = [&../UraniumPerEnriched, &../UraniumPerSecond]
		PowerPerEnriched = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity) / 1000
		PowerPerSecond = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&Interval) / 1000
		EnrichedUraniumPowerUsage = [&../PowerPerEnriched, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		FactoryBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	}
}