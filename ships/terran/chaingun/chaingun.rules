Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/ChainGun"
	IconNameKey = "Parts/ChainGunIcon"
	ID = cosmoteer.chaingun // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "WeaponsProjectile"
	DescriptionKey = "Parts/ChainGunDesc"
	Resources
	[
		[steel, 144]
		[coil2, 38]
		[tristeel, 45]
	]
	TypeCategories = [uses_ammo, is_crewed, chaingun, chaingun_ammo_requester]
	ReceivableBuffs : ^/0/ReceivableBuffs [RateOfFire]
	Size = [3, 5]  //if you change this, need to also change TotalResourceStorage resource proxy checks.
	Density = 2
	PhysicalRect = [0, 1, 3, 4]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 18000
	InitialPenetrationResistance = 3
	PenetrationRectType = Normal
	ProhibitAbove = 2
	AllowedDoorLocations
	[
		[-1, 4]
		[0, 5]
		[1, 5]
		[2, 5]
		[3, 4]
	]
	BlockedTravelCells
	[
		[0, 1]
		[0, 2]
		[0, 3]
		[2, 1]
		[2, 2]
		[2, 3]
	]
	ForceManhattanPathInPart = true
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, Left]
		}
		{
			Key = [1, 1]
			Value = None
		}
		{
			Key = [2, 1]
			Value = [TopRight, Right]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [1, 0]
			Value = [TopLeft, Top, TopRight]
		}
		{
			Key = [2, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [45,90]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 6
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		GunIsFiringTimer //Is on if we have fired a shot
		{
			Type = Timer
			Duration = &../ShellChangingValueTween/OffTweenDuration
			StartTrigger = BulletEmitter
			ResetTrigger = BulletEmitter
			StartExpired = true
			InvertToggle = true
		}
		GunIsFiring
		{
			Type = MultiToggle
			Toggles = [GunIsFiringTimer, CombinedBulletSplitters]
			Mode = All
		}
		RateOfFireRampUpBuff
		{
			Type = SelfBuffProvider
			BuffType = RateOfFire  //used as divide by the fixed weapon fire rate
			BuffAmount = 1
			BuffMultiplier = RateOfFireTween
		}
		RateOfFireTween
		{
			Type = ValueTween
			OffValue = 1
			OnValue = 10.5 //30 shots per second if base value 0.35
			OnTweenDuration = 18
			OffTweenDuration = 4
			IsOnToggle = GunIsFiring
		}
		ShellChangingValueTween
		{
			Type = ValueTween
			OnTweenDuration = 1.2
			OffTweenDuration = 1.2
			IsOnToggle = ShellShouldOpen
		}
		IsShellFullyOpen
		{
			Type = ThresholdToggle
			ValueFrom = ShellChangingValueTween
			MinAmount = 100%
		}
		IsShellFullyClosed
		{
			Type = ThresholdToggle
			ValueFrom = ShellChangingValueTween
			MaxAmount = 0%
		}

		AmmoStorageLeft
		{
			Type = ResourceStorage
			ResourceType = bullet
			MaxResources = 6
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoLoad
		}
		AmmoStorageRight
		{
			Type = ResourceStorage
			ResourceType = bullet
			MaxResources = 6
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/AmmoLoad
		}
		CombinedAmmoStorage
		{
			Type = MultiResourceStorage
			ResourceType = bullet
			ResourceStorages = [AmmoStorageLeft, AmmoStorageRight]
			RemoveMode = InOrder
			CycleStorageOnRemove = true  //Will change the order of the storage list
		}
		BulletSplitterLeft
		{
			Type = InlineResourceConverter
			ResourceType = bullet
			FromStorage = AmmoStorageLeft
			FromQuantity = 1
			ToQuantity = 4
		}
		BulletSplitterRight
		{
			Type = InlineResourceConverter
			ResourceType = bullet
			FromStorage = AmmoStorageRight
			FromQuantity = 1
			ToQuantity = 4
		}
		CombinedBulletSplitters
		{
			Type = MultiResourceStorage
			ResourceType = bullet
			ResourceStorages = [BulletSplitterLeft, BulletSplitterRight]
			RemoveMode = InOrder
			CycleStorageOnRemove = true  //Will change the order of the storage list
		}

		StorageUIProxies
		{
			Type = ToggledComponents
			Toggle = IsShellFullyClosed //if we are fully closed, turn on these proxies and consumers to allow ammo transfer to the belt
			Components
			{
				AmmoUIStorageLeftProxy
				{
					Type = ResourceStorageProxy
					ResourceType = bullet
					ComponentID = AmmoStorageLeft
					UITileRect = [7/64, 3 + 7/64, 1 - 14/64, 1 - 14/64]
				}
				AmmoUIStorageRightProxy
				{
					Type = ResourceStorageProxy
					ResourceType = bullet
					ComponentID = AmmoStorageRight
					UITileRect = [2 + 7/64, 3 + 7/64, 1 - 14/64, 1 - 14/64]
				}
				AmmoConsumerLeft //For the crew to fill
				{
					Type = ResourceConsumer
					ResourceType = bullet
					Storage = AmmoUIStorageLeftProxy
					DefaultPriority = &/PRIORITIES/Weapon_Supply
					OperationalToggle = PowerToggle
					ConsumptionToggleButtonOffset = [0, -.4]
				}
				AmmoConsumerRight //For the crew to fill
				{
					Type = ResourceConsumer
					ResourceType = bullet
					Storage = AmmoUIStorageRightProxy
					DefaultPriority = &/PRIORITIES/Weapon_Supply
					OperationalToggle = PowerToggle
					ConsumptionToggleButtonOffset = [0, -.4]
				}
			}
		}

		IsRequestingRightToLeftAmmo //The belt only moves when we are firing, otherwise, it can be loaded
		{
			Type = ToggleProxy
			ComponentID = ShellIsFullyOpenedAndRightMagNotPullingRight
		}
		IsRequestingLeftToRightAmmo
		{
			Type = ToggleProxy
			ComponentID = ShellIsFullyOpenAndLeftMagNotPullingLeft
		}
		ShellIsFullyOpenAndLeftMagNotPullingLeft
		{
			Type = MultiToggle
			Toggles = [IsShellFullyOpen, {Toggle = IsLeftMagazineBeingPulledLeft, Invert = true}]
			Mode = All
		}
		ShellIsFullyOpenedAndRightMagNotPullingRight
		{
			Type = MultiToggle
			Toggles = [IsShellFullyOpen, {Toggle = IsRightMagazineBeingPulledRight, Invert = true}]
			Mode = All
		}

		HasMaxAmmo
		{
			Type = ThresholdToggle
			ValueFrom = TotalResourceStorage
			MinAmount = 100%
		}

		EitherWeaponIsTargeting
		{
			Type = MultiToggle
			Toggles = [Turret, FixedWeaponAimer]
			Mode = Any
		}

		TargetingAndCanShoot
		{
			Type = MultiToggle
			Toggles = [EitherWeaponIsTargeting, CombinedBulletSplitters, HasEnoughAmmoToStartShooting]
			Mode = All
		}
		ShellShouldOpen //Used by shell opening and closing
		{
			Type = MultiToggle
			Toggles = [TargetingAndCanShoot, ForceFireToggle]
			Mode = Any
		}
		HasEnoughAmmoToStartShooting
		{
			Type = MultiToggle
			Toggles = [HasMaxAmmo, GunIsFiring, IsInDCMode]  //override the max ammo check if we're in DC
			Mode = Any
		}
		IsInDCMode
		{
			Type = DirectControlToggle
			Weapon = Turret
		}
		ForceFireToggle
		{
			Type = UIToggle
			ToggleID = "force_fire_chaingun"
			Default = 0
			AutoOffTrigger = ShouldTurnOffForceFireTrigger
			OperationalToggle = ForceFirePermission
			RememberValue = false
		}
		ShouldTurnOffForceFireTrigger // For turning off force fire
		{
			Type = ToggleTrigger
			Toggle = ShouldTurnOffForceFire
			TriggerWhenOn = true
			TriggerWhenOff = false
		}
		ShouldTurnOffForceFire  //if turret taking over, or out of ammo
		{
			Type = MultiToggle
			Toggles = [TargetingWithTurretAndCanShoot, {Toggle = CombinedAmmoStorage; Invert = true}, {Toggle = IsOperational; Invert = true}, AutoFireAndHasEnoughAmmoToStartShooting]
			Mode = Any
		}
		AutoFireAndHasEnoughAmmoToStartShooting
		{
			Type = MultiToggle
			Toggles = [AutoFireToggle, HasEnoughAmmoToStartShooting]
			Mode = All
		}

		ForceFirePermission
		{
			Type = MultiToggle
			Toggles = [IsOperational, {Toggle = ShouldTurnOffForceFire; Invert = true}]
			Mode = All
		}
		TargetingWithTurretAndCanShoot //We need this check because we can't use the fixed weapon to determin targeting for the force fire toggle, as that is true when force firing
		{
			Type = MultiToggle
			Toggles = [Turret, CombinedBulletSplitters, HasEnoughAmmoToStartShooting]
			Mode = All
		}

		TotalResourceStorage //used for amount of ammo check
		{
			Type = MultiResourceStorage
			ResourceType = bullet
			ResourceStorages = [CombinedAmmoStorage, CombinedLeftBeltStoragesProxy, CombinedRightBeltStoragesProxy]
		}
		CombinedLeftBeltStoragesProxy //used for amount of ammo check
		{
			Type = ResourceStorageProxy
			ProxyToggle = IsLeftMagazineBeingPulledLeft //Do not look left if left mag is turned the other way. (After invert)
			InvertProxyToggle = true
			ResourceType = bullet
			PartLocation = [-1, 3]
			ProxyableComponents
			[
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier
						Rot = 0 //is perfectly aligned
						Right = 0
						Bottom = 5
					}
					ComponentID = CombinedLeftBeltStorages
				}
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier
						Rot = 2 //is perfectly aligned
						Right = 0
						Bottom = 4
					}
					ComponentID = CombinedRightBeltStorages
				}
			]
		}
		CombinedRightBeltStoragesProxy //used for amount of ammo check
		{
			Type = ResourceStorageProxy
			ProxyToggle = IsRightMagazineBeingPulledRight //Do not look right if right mag is turned the other way. (After Invert)
			InvertProxyToggle = true
			ResourceType = bullet
			PartLocation = [3, 3]
			ProxyableComponents
			[
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier
						Rot = 0 //is perfectly aligned
						Left = 3
						bottom = 5
					}
					ComponentID = CombinedRightBeltStorages
				}
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier
						Rot = 2 //is perfectly aligned
						Left = 3
						Bottom = 4
					}
					ComponentID = CombinedLeftBeltStorages
				}
			]
		}
		IsLeftMagazineBeingPulledLeft
		{
			Type = ToggleProxy
			PartLocation = [-1, 3] //looking to the left
			ProxyableComponents
			[
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier
						Rot = 0 //is perfectly aligned
						Right = 0
						Bottom = 5
					}
					ComponentID = IsRequestingRightToLeftAmmo
				}
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier
						Rot = 2 //is perfectly aligned
						Right = 0
						Bottom = 4
					}
					ComponentID = IsRequestingLeftToRightAmmo
				}
			]
		}
		IsRightMagazineBeingPulledRight
		{
			Type = ToggleProxy
			PartLocation = [3, 3] //looking to the right
			ProxyableComponents
			[
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier //making sure they have the special category
						Rot = 0 //is perfectly aligned
						Left = 3
						Bottom = 5
					}
					ComponentID = IsRequestingLeftToRightAmmo
				}
				{
					PartCriteria
					{
						Category = chaingun_ammo_supplier //making sure they have the special category
						Rot = 2 //is perfectly aligned
						Left = 3
						Bottom = 4
					}
					ComponentID = IsRequestingRightToLeftAmmo
				}
			]
		}

		TurretSlider
		{
			Type = TransformLerp
			ValueFrom = ShellChangingValueTween
			StartLocation = [96/64, 117/64]
			EndLocation = [96/64, 2/64]
		}
		AimingTurretSlider
		{
			Type = TransformMatch
			OperationalToggle = IsShellFullyClosed
			InvertOperationalToggle = true
			ChainedTo = TurretSlider
			Rotation = -90d // Relative to unrotated part.
			MatchTransformOf = Turret
			MatchRotationSpeed = 50d
			ResetTransformWhen = IsShellNotFullyOpen
			ResetRotationSpeed = 120d
			ClampRotationToArc = [-(&../../Turret/FiringArc)/2 - 90d, (&../../Turret/FiringArc)]
			ToggleOnRotationThreshold = 2d
		}

		IsShellNotFullyOpen
		{
			Type = MultiToggle
			Toggles = [{Toggle = IsShellFullyOpen; Invert = true}]
			Mode = All
		}

		Targeter
		{
			Type = UITargeter
			TargeterID = chaingun_aim
			Weapons = [Turret, FixedWeaponAimer]
		}

		Turret
		{
			Type = TurretWeapon
			Location = &../TurretSlider/EndLocation
			Rotation = -90d // Relative to unrotated part.
			OperationalToggle = IsOperational //turret is always looking for targets
			FireInterval = Infinity //only used in the fixed weapon
			FiringArc = 220d
			RotateSpeed = Infinity // AimingTurretSlider does the actual physical rotation.
			FireThresholdAngle = 0
			AIFirepowerRating = 18300 //Set to half the dps when its on, because of the down time.
			TargetingEmitter = BulletEmitter
			InstantSearchesAfterTargetLost = 5
			ToggleOnMode = HasTargetExceptShipRelative
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressDirectControlWhenTargetingShipRelativePoints = true
			SuppressFirepowerEstimationWhenTargetingShipRelativePoints = true

			AutoTargets
			[
				{
					TargetType = ShipParts
					Toggle = AutoTargetToggle
				}
			]

			BlueprintArcSprite
			{
				Texture = &/INDICATORS/WeaponArc
				Size = [0, 1.5]
				Color = [255, 0, 0, 63]
			}
			BlueprintArcRadius = 10
			BlueprintArcSpriteSegments = 64

			CoverageSectorArc
			{
				Texture = &/INDICATORS/VerticalGradient
				VertexColor = [255, 255, 255, 51]
				QuadCount = 64
			}
		}

		AutoFireOrForceFire
		{
			Type = MultiToggle
			Toggles = [AutoFireToggle, ForceFireToggle]
			Mode = Any
		}

		FixedWeaponShooter
		{
			Type = FixedWeapon
			OperationalToggle = IsShellFullyOpen//
			AutoFireToggle = IsShellFullyOpen //
			FireInterval = { BaseValue=0.35; BuffType=RateOfFire; BuffMode=Divide;}
			Emitter = BulletEmitter
			DefaultDirectControlBinding = 0
			CanBeGivenExplicitTarget = false

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = False
			}
		}

		False
		{
			Type = StaticToggle
			ToggleOn = "false"
		}

		FixedWeaponAimer
		{
			Type = FixedWeapon
			ChainedTo = Turret
			OperationalToggle = IsOperational//Always checking for a target
			AutoFireToggle = AutoFireToggle //
			FireInterval = Infinity //only used in the fixed weapon
			Emitter = BulletEmitter
			DefaultDirectControlBinding = 0
			AllowEnemyStructureAutoTargeting = true
			ToggleOnMode = WantsToFire
			AIFirepowerRating = &../Turret/AIFirepowerRating
			SuppressWholeShipTargetOverlaysWhenTargetingShipRelativePoints = true
			SuppressShipWideExplicitTargetsWhenTargetingShipRelativePoints = true
			SuppressFirepowerEstimationWhenNotTargetingShipRelativePoints = true

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = AutoTargetToggle
			}

			CoverageLine
			{
				LineSprite
				{
					Texture = &/INDICATORS/RadialGradient
					VertexColor = [255, 255, 255, 191]
					UVRect = [.5, 0, 0, 1]
				}
				LineThickness = 2

				BeginCapSprite : LineSprite
				{
					UVRect = [0, 0, .5, 1]
				}
				BeginCapSize = [1, 2]

				EndCapSprite : LineSprite
				{
					UVRect = [.5, 0, .5, 1]
				}
				EndCapSize = [1, 2]
			}
		}

		ChaingunRampupProgressBar
		{
			Type = ProgressBar
			ShowProgressFor = RateOfFireTween
			OperationalToggle = IsChaingunPoweredDown
			InvertOperationalToggle = true
			ValueRange = [&~/Part/Components/RateOfFireTween/OffValue, &~/Part/Components/RateOfFireTween/OnValue]
		}

		IsChaingunPoweredDown
		{
			Type = ThresholdToggle
			ValueFrom = RateOfFireTween
			MaxAmount = &../RateOfFireTween/OffValue
		}

		CanEmit
		{
			Type = MultiToggle
			Toggles = [AimingTurretSlider, GunIsFiring]
			Mode = Any
		}
		BulletEmitter : <./Data/shots/chaingun_shot/chaingun_shot.rules>
		{
			Type = BeamEmitter
			OperationalToggle = CanEmit
			ChainedTo = AimingTurretSlider
			FireTrigger = FixedWeaponShooter
			GetTargetFrom = Turret
			Location = [0, 0]
			Duration = 0
			ResourceStorage = CombinedBulletSplitters // Needed to prevent turret from trying to fire when out of ammo.
			ResourcesUsed = 1
			Spread = [-1.5d, 1.5d]
			Recoil = 20
			Burst = 1
			BeamMediaEffectsOffset = [2, 0]
			BeamMediaEffectsLengthOffset = -2
		}

		FireEffect
		{
			Type = TriggeredEffects
			ChainedTo = BulletEmitter
			Trigger = BulletEmitter
			Location = [2.2, 0]

			MediaEffects
			[
				&<particles/chaingun_shoot.rules>
				&<particles/chaingun_shoot_flash.rules>
				&<particles/chaingun_casing.rules>
				&<particles/chaingun_shoot_smoke.rules>

				: /BASE_SOUNDS/AudioExterior
				{
					RandomSounds = ["chaingun_shot_01.wav", "chaingun_shot_02.wav", "chaingun_shot_03.wav", "chaingun_shot_04.wav"]
					Speed = 2
					SpeedVariation = .5
					Volume = .5
					MaxConcurrent = 30
				}

				: /BASE_SHAKE
				{
					ShakeAmount = .025
					Duration = .25
				}
			]
		}

		CrewLocation1
		{
			Type = CrewLocation
			ChainedTo = AimingTurretSlider
			Location = [0, 0]
			Rotation = 90d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [55/64, 258/64]
			Rotation = -21d
		}
		CrewLocation3
		{
			Type = CrewLocation
			Location = [137/64, 258/64]
			Rotation = 21d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 3
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [CombinedAmmoStorage]
			CrewDestinations //where the crew actually go
			[
				[1.5, 128/64]
				[55/64, 258/64]
				[137/64, 258/64]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
				CrewLocation3
			]
		}

		TurretCollider
		{
			Type = CircleCollider
			ChainedTo = AimingTurretSlider
			Radius = 54/64
			Density = 1
			IncludeWhenUnderConstruction = false
		}

		DefensiveShellColliderChangingValueTween
		{
			Type = ValueTween
			OnTweenDuration = 0.7
			OffTweenDuration = &../ShellChangingValueTween/OffTweenDuration
			IsOnToggle = ShellShouldOpen
		}
		DefensiveShellSlider
		{
			Type = TransformLerp
			ValueFrom = DefensiveShellColliderChangingValueTween
			StartLocation = [96/64, 72/64]
			EndLocation = [96/64, 180/64] //Fully Closed Position
		}

		DefensiveShellCollider
		{
			Type = CircleCollider
			ChainedTo = DefensiveShellSlider
			Radius = 94/64
			Density = 2
			IncludeWhenUnderConstruction = false
			InitialPenetrationResistance = 14
			DamageResistances =
			{
				default = 70%,
				explosive = &default
			}
		}

		TurretWeaponShootingGraphics
		{
			Type = Graphics
			ChainedTo = AimingTurretSlider
			Rotation = 90d
			OperationalToggle = IsShellFullyOpen
			ResetAnimationTrigger = BulletEmitter
			AnimationSpeedFactor = RateOfFireTween

			OperationalDoodad
			{
				Layer = "weapons"
				Offset = [0, -113/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_barrel3_blur.png"
							"turret_barrel5_blur.png"
							"turret_barrel7_blur.png"
							"turret_barrel1_blur.png"
							"turret_barrel1.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							"turret_barrel_normals3_blur.png"
							"turret_barrel_normals5_blur.png"
							"turret_barrel_normals7_blur.png"
							"turret_barrel_normals1_blur.png"
							"turret_barrel_normals1.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 2]
						AnimationInterval = (&~/Part/Components/FixedWeaponShooter/FireInterval/BaseValue) / 4
						AnimationStartTime = MinValue
						ClampAnimation = true
					}
				]
			}
		}

		TurretWeaponExtendAndRetractGraphics
		{
			Type = Graphics
			ChainedTo = AimingTurretSlider
			Rotation = 90d

			OperationalToggle = IsShellFullyOpen
			InvertOperationalToggle = true
			DoodadToggle = ShellShouldOpen
			ShowToggledDoodadsWhenNotOperational = false

			ToggleOnDoodad
			{
				Layer = "weapons"
				Offset = [0, -113/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_barrel_retracting4.png"
							"turret_barrel_retracting3.png"
							"turret_barrel_retracting2.png"
							"turret_barrel_retracting1.png"
							"turret_barrel1.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							"turret_barrel_retracting_normals4.png"
							"turret_barrel_retracting_normals3.png"
							"turret_barrel_retracting_normals2.png"
							"turret_barrel_retracting_normals1.png"
							"turret_barrel_normals1.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 2]
						AnimationInterval = 0.08
						ClampAnimation = true
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "weapons"
				Offset = [0, -113/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_barrel1.png"
							"turret_barrel_retracting1.png"
							"turret_barrel_retracting2.png"
							"turret_barrel_retracting3.png"
							"turret_barrel_retracting4.png"// Loop back to beginning and clamp there.
						]
						NormalsAnimationFiles
						[
							"turret_barrel_normals1.png"
							"turret_barrel_retracting_normals1.png"
							"turret_barrel_retracting_normals2.png"
							"turret_barrel_retracting_normals3.png"
							"turret_barrel_retracting_normals4.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 2]
						AnimationInterval = 0.08
						ClampAnimation = true
					}
				]
			}
		}

		TurretGraphics
		{
			Type = Graphics
			ChainedTo = AimingTurretSlider
			Rotation = 90d
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "turret_floor.png"
						Size = [2, 2]
					}
					{
						File = "turret_floor_33.png"
						Size = [2, 2]
					}
					{
						File = "turret_floor_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_doodads_on1.png"
							"turret_doodads_on2.png"
							"turret_doodads_on3.png"
							"turret_doodads_on4.png"
							"turret_doodads_on5.png"
							"turret_doodads_on6.png"
							"turret_doodads_on7.png"
							"turret_doodads_on8.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"turret_doodads_on1_33.png"
							"turret_doodads_on2_33.png"
							"turret_doodads_on3_33.png"
							"turret_doodads_on4_33.png"
							"turret_doodads_on5_33.png"
							"turret_doodads_on6_33.png"
							"turret_doodads_on7_33.png"
							"turret_doodads_on8_33.png"
						]
						Size = [1, 2]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"turret_doodads_on1_66.png"
							"turret_doodads_on2_66.png"
							"turret_doodads_on3_66.png"
							"turret_doodads_on4_66.png"
							"turret_doodads_on5_66.png"
							"turret_doodads_on6_66.png"
							"turret_doodads_on7_66.png"
							"turret_doodads_on8_66.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.125
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				DamageLevels
				[
					{
						File = "turret_doodads_off.png"
						Size = [1, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "turret_lights.png"
						Size = [2, 2]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "turret_roof.png"
						NormalsFile = "turret_roof_normals.png"
						Size = [2, 2]
					}
					{
						File = "turret_roof_33.png"
						NormalsFile = "turret_roof_normals_33.png"
						Size = [2, 2]
					}
					{
						File = "turret_roof_66.png"
						NormalsFile = "turret_roof_normals_66.png"
						Size = [2, 2]
					}
				]
			}
		}

		TurretDoorGraphics
		{
			Type = Graphics
			ChainedTo = AimingTurretSlider
			Location = [-35/64, 0]
			Rotation = -90d
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_door5.png"
							"turret_door4.png"
							"turret_door3.png"
							"turret_door2.png"
							"turret_door1.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door5_33.png"
							"turret_door4_33.png"
							"turret_door3_33.png"
							"turret_door2_33.png"
							"turret_door1_33.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door5_66.png"
							"turret_door4_66.png"
							"turret_door3_66.png"
							"turret_door2_66.png"
							"turret_door1_66.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_door1.png"
							"turret_door2.png"
							"turret_door3.png"
							"turret_door4.png"
							"turret_door5.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door1_33.png"
							"turret_door2_33.png"
							"turret_door3_33.png"
							"turret_door4_33.png"
							"turret_door5_33.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door1_66.png"
							"turret_door2_66.png"
							"turret_door3_66.png"
							"turret_door4_66.png"
							"turret_door5_66.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
				]
			}
		}

		TurretAccessDoorGraphics
		{
			Type = Graphics
			Location = [1.5, 3]
			OperationalToggle = IsOperational
			OperationalDoodad
			{
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_door5.png"
							"turret_door4.png"
							"turret_door3.png"
							"turret_door2.png"
							"turret_door1.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door5_33.png"
							"turret_door4_33.png"
							"turret_door3_33.png"
							"turret_door2_33.png"
							"turret_door1_33.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door5_66.png"
							"turret_door4_66.png"
							"turret_door3_66.png"
							"turret_door2_66.png"
							"turret_door1_66.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doors"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"turret_door1.png"
							"turret_door2.png"
							"turret_door3.png"
							"turret_door4.png"
							"turret_door5.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door1_33.png"
							"turret_door2_33.png"
							"turret_door3_33.png"
							"turret_door4_33.png"
							"turret_door5_33.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"turret_door1_66.png"
							"turret_door2_66.png"
							"turret_door3_66.png"
							"turret_door4_66.png"
							"turret_door5_66.png"// Loop back to beginning and clamp there.
						]
						Size = [1, 1]
						AnimationInterval = 0.04
						ClampAnimation = true
					}
				]
			}
		}

		External_Walls_Graphics
		{
			Type = Graphics
			Location = [1.5, 0.5]
			Walls
			{
				Layer = "external_walls"
				DamageLevels
				[
					{
						File = "external_walls.png"
						NormalsFile = "external_walls_normals.png"
						Size = [3, 1]
					}
					{
						File = "external_walls_33.png"
						NormalsFile = "external_walls_normals_33.png"
						Size = [3, 1]
					}
					{
						File = "external_walls_66.png"
						NormalsFile = "external_walls_normals_66.png"
						Size = [3, 1]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 3]
			OperationalToggle = IsOperational

			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 4]
					}
					{
						File = "floor_33.png"
						Size = [3, 4]
					}
					{
						File = "floor_66.png"
						Size = [3, 4]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [3, 1]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [3, 1]
						AnimationInterval = 0.125
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [3, 1]
						AnimationInterval = 0.125
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [3, 4]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 4]
					}
					{
						File = "walls_33.png"
						Size = [3, 4]
					}
					{
						File = "walls_66.png"
						Size = [3, 4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, -.5]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 5]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 5]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 5]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				Offset = [0, 1.5]
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [3, 1]
					}
					{
						File = "roof_glows_33.png"
						Size = [3, 1]
					}
					{
						File = "roof_glows_66.png"
						Size = [3, 1]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, 10/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [5.5, 5.5]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		DefensiveShellSprite
		{
			Type = OpenCloseSprite
			Location = [1.5, 1]
			OperationalToggle = ShellShouldOpen
			Layer = "roof_doodads"
			OpenDamageLevels
			[
				{
					AnimationFiles
					[
						"defensive_shell1.png"
						"defensive_shell2.png"
						"defensive_shell3.png"
						"defensive_shell4.png"
						"defensive_shell5.png"
						"defensive_shell6.png"
						"defensive_shell7.png"
						"defensive_shell8.png"
						"defensive_shell9.png"
						"defensive_shell10.png"
						"defensive_shell11.png"
						"defensive_shell12.png"
					]
					NormalsAnimationFiles
					[
						"defensive_shell_normals1.png"
						"defensive_shell_normals2.png"
						"defensive_shell_normals3.png"
						"defensive_shell_normals4.png"
						"defensive_shell_normals5.png"
						"defensive_shell_normals6.png"
						"defensive_shell_normals7.png"
						"defensive_shell_normals8.png"
						"defensive_shell_normals9.png"
						"defensive_shell_normals10.png"
						"defensive_shell_normals11.png"
						"defensive_shell_normals12.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OnTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"defensive_shell1_33.png"
						"defensive_shell2_33.png"
						"defensive_shell3_33.png"
						"defensive_shell4_33.png"
						"defensive_shell5_33.png"
						"defensive_shell6_33.png"
						"defensive_shell7_33.png"
						"defensive_shell8_33.png"
						"defensive_shell9_33.png"
						"defensive_shell10_33.png"
						"defensive_shell11_33.png"
						"defensive_shell12_33.png"
					]
					NormalsAnimationFiles
					[
						"defensive_shell_normals1_33.png"
						"defensive_shell_normals2_33.png"
						"defensive_shell_normals3_33.png"
						"defensive_shell_normals4_33.png"
						"defensive_shell_normals5_33.png"
						"defensive_shell_normals6_33.png"
						"defensive_shell_normals7_33.png"
						"defensive_shell_normals8_33.png"
						"defensive_shell_normals9_33.png"
						"defensive_shell_normals10_33.png"
						"defensive_shell_normals11_33.png"
						"defensive_shell_normals12_33.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OnTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"defensive_shell1_66.png"
						"defensive_shell2_66.png"
						"defensive_shell3_66.png"
						"defensive_shell4_66.png"
						"defensive_shell5_66.png"
						"defensive_shell6_66.png"
						"defensive_shell7_66.png"
						"defensive_shell8_66.png"
						"defensive_shell9_66.png"
						"defensive_shell10_66.png"
						"defensive_shell11_66.png"
						"defensive_shell12_66.png"
					]
					NormalsAnimationFiles
					[
						"defensive_shell_normals1_66.png"
						"defensive_shell_normals2_66.png"
						"defensive_shell_normals3_66.png"
						"defensive_shell_normals4_66.png"
						"defensive_shell_normals5_66.png"
						"defensive_shell_normals6_66.png"
						"defensive_shell_normals7_66.png"
						"defensive_shell_normals8_66.png"
						"defensive_shell_normals9_66.png"
						"defensive_shell_normals10_66.png"
						"defensive_shell_normals11_66.png"
						"defensive_shell_normals12_66.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OnTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
			ClosedDamageLevels
			[
				{
					AnimationFiles
					[
						"defensive_shell12.png"
						"defensive_shell11.png"
						"defensive_shell10.png"
						"defensive_shell9.png"
						"defensive_shell8.png"
						"defensive_shell7.png"
						"defensive_shell6.png"
						"defensive_shell5.png"
						"defensive_shell4.png"
						"defensive_shell3.png"
						"defensive_shell2.png"
						"defensive_shell1.png"
					]
					NormalsAnimationFiles
					[
						"defensive_shell_normals12.png"
						"defensive_shell_normals11.png"
						"defensive_shell_normals10.png"
						"defensive_shell_normals9.png"
						"defensive_shell_normals8.png"
						"defensive_shell_normals7.png"
						"defensive_shell_normals6.png"
						"defensive_shell_normals5.png"
						"defensive_shell_normals4.png"
						"defensive_shell_normals3.png"
						"defensive_shell_normals2.png"
						"defensive_shell_normals1.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OffTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"defensive_shell12_33.png"
						"defensive_shell11_33.png"
						"defensive_shell10_33.png"
						"defensive_shell9_33.png"
						"defensive_shell8_33.png"
						"defensive_shell7_33.png"
						"defensive_shell6_33.png"
						"defensive_shell5_33.png"
						"defensive_shell4_33.png"
						"defensive_shell3_33.png"
						"defensive_shell2_33.png"
						"defensive_shell1_33.png"
					]
					NormalsAnimationFiles
					[
						"defensive_shell_normals12_33.png"
						"defensive_shell_normals11_33.png"
						"defensive_shell_normals10_33.png"
						"defensive_shell_normals9_33.png"
						"defensive_shell_normals8_33.png"
						"defensive_shell_normals7_33.png"
						"defensive_shell_normals6_33.png"
						"defensive_shell_normals5_33.png"
						"defensive_shell_normals4_33.png"
						"defensive_shell_normals3_33.png"
						"defensive_shell_normals2_33.png"
						"defensive_shell_normals1_33.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OffTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"defensive_shell12_66.png"
						"defensive_shell11_66.png"
						"defensive_shell10_66.png"
						"defensive_shell9_66.png"
						"defensive_shell8_66.png"
						"defensive_shell7_66.png"
						"defensive_shell6_66.png"
						"defensive_shell5_66.png"
						"defensive_shell4_66.png"
						"defensive_shell3_66.png"
						"defensive_shell2_66.png"
						"defensive_shell1_66.png"
					]
					NormalsAnimationFiles
					[
						"defensive_shell_normals12_66.png"
						"defensive_shell_normals11_66.png"
						"defensive_shell_normals10_66.png"
						"defensive_shell_normals9_66.png"
						"defensive_shell_normals8_66.png"
						"defensive_shell_normals7_66.png"
						"defensive_shell_normals6_66.png"
						"defensive_shell_normals5_66.png"
						"defensive_shell_normals4_66.png"
						"defensive_shell_normals3_66.png"
						"defensive_shell_normals2_66.png"
						"defensive_shell_normals1_66.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OffTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
		}

		InternalDefensiveShellSprite
		{
			Type = OpenCloseSprite
			Location = [1.5, 1]
			OperationalToggle = ShellShouldOpen
			Layer = "structure"
			OpenDamageLevels
			[
				{
					AnimationFiles
					[
						"internal_defensive_shell1.png"
						"internal_defensive_shell2.png"
						"internal_defensive_shell3.png"
						"internal_defensive_shell4.png"
						"internal_defensive_shell5.png"
						"internal_defensive_shell6.png"
						"internal_defensive_shell7.png"
						"internal_defensive_shell8.png"
						"internal_defensive_shell9.png"
						"internal_defensive_shell9.png"
						"internal_defensive_shell9.png"
						"internal_defensive_shell9.png"
					]
					NormalsAnimationFiles
					[
						"internal_defensive_shell_normals1.png"
						"internal_defensive_shell_normals2.png"
						"internal_defensive_shell_normals3.png"
						"internal_defensive_shell_normals4.png"
						"internal_defensive_shell_normals5.png"
						"internal_defensive_shell_normals6.png"
						"internal_defensive_shell_normals7.png"
						"internal_defensive_shell_normals8.png"
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals9.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OnTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"internal_defensive_shell1_33.png"
						"internal_defensive_shell2_33.png"
						"internal_defensive_shell3_33.png"
						"internal_defensive_shell4_33.png"
						"internal_defensive_shell5_33.png"
						"internal_defensive_shell6_33.png"
						"internal_defensive_shell7_33.png"
						"internal_defensive_shell8_33.png"
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell9_33.png"
					]
					NormalsAnimationFiles
					[
						"internal_defensive_shell_normals1_33.png"
						"internal_defensive_shell_normals2_33.png"
						"internal_defensive_shell_normals3_33.png"
						"internal_defensive_shell_normals4_33.png"
						"internal_defensive_shell_normals5_33.png"
						"internal_defensive_shell_normals6_33.png"
						"internal_defensive_shell_normals7_33.png"
						"internal_defensive_shell_normals8_33.png"
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals9_33.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OnTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"internal_defensive_shell1_66.png"
						"internal_defensive_shell2_66.png"
						"internal_defensive_shell3_66.png"
						"internal_defensive_shell4_66.png"
						"internal_defensive_shell5_66.png"
						"internal_defensive_shell6_66.png"
						"internal_defensive_shell7_66.png"
						"internal_defensive_shell8_66.png"
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell9_66.png"
					]
					NormalsAnimationFiles
					[
						"internal_defensive_shell_normals1_66.png"
						"internal_defensive_shell_normals2_66.png"
						"internal_defensive_shell_normals3_66.png"
						"internal_defensive_shell_normals4_66.png"
						"internal_defensive_shell_normals5_66.png"
						"internal_defensive_shell_normals6_66.png"
						"internal_defensive_shell_normals7_66.png"
						"internal_defensive_shell_normals8_66.png"
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals9_66.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OnTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
			ClosedDamageLevels
			[
				{
					AnimationFiles
					[
						"internal_defensive_shell9.png"
						"internal_defensive_shell9.png"
						"internal_defensive_shell9.png"
						"internal_defensive_shell9.png"
						"internal_defensive_shell8.png"
						"internal_defensive_shell7.png"
						"internal_defensive_shell6.png"
						"internal_defensive_shell5.png"
						"internal_defensive_shell4.png"
						"internal_defensive_shell3.png"
						"internal_defensive_shell2.png"
						"internal_defensive_shell1.png"
					]
					NormalsAnimationFiles
					[
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals9.png"
						"internal_defensive_shell_normals8.png"
						"internal_defensive_shell_normals7.png"
						"internal_defensive_shell_normals6.png"
						"internal_defensive_shell_normals5.png"
						"internal_defensive_shell_normals4.png"
						"internal_defensive_shell_normals3.png"
						"internal_defensive_shell_normals2.png"
						"internal_defensive_shell_normals1.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OffTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell9_33.png"
						"internal_defensive_shell8_33.png"
						"internal_defensive_shell7_33.png"
						"internal_defensive_shell6_33.png"
						"internal_defensive_shell5_33.png"
						"internal_defensive_shell4_33.png"
						"internal_defensive_shell3_33.png"
						"internal_defensive_shell2_33.png"
						"internal_defensive_shell1_33.png"
					]
					NormalsAnimationFiles
					[
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals9_33.png"
						"internal_defensive_shell_normals8_33.png"
						"internal_defensive_shell_normals7_33.png"
						"internal_defensive_shell_normals6_33.png"
						"internal_defensive_shell_normals5_33.png"
						"internal_defensive_shell_normals4_33.png"
						"internal_defensive_shell_normals3_33.png"
						"internal_defensive_shell_normals2_33.png"
						"internal_defensive_shell_normals1_33.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OffTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell9_66.png"
						"internal_defensive_shell8_66.png"
						"internal_defensive_shell7_66.png"
						"internal_defensive_shell6_66.png"
						"internal_defensive_shell5_66.png"
						"internal_defensive_shell4_66.png"
						"internal_defensive_shell3_66.png"
						"internal_defensive_shell2_66.png"
						"internal_defensive_shell1_66.png"
					]
					NormalsAnimationFiles
					[
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals9_66.png"
						"internal_defensive_shell_normals8_66.png"
						"internal_defensive_shell_normals7_66.png"
						"internal_defensive_shell_normals6_66.png"
						"internal_defensive_shell_normals5_66.png"
						"internal_defensive_shell_normals4_66.png"
						"internal_defensive_shell_normals3_66.png"
						"internal_defensive_shell_normals2_66.png"
						"internal_defensive_shell_normals1_66.png"
					]
					Size = [3, 4]
					AnimationInterval = (&~/Part/Components/ShellChangingValueTween/OffTweenDuration) / 12
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
		}

		BeltAmmoSpritesLeft
		{
			Type = ResourceSprites
			Location = [32/64, 99/64]
			ResourceStorage = BulletSplitterLeft
			Layer = "doodads_low"
			AnimationSpeedFactor = RateOfFireTween
			AnimationSpeedFactorRenormalize = [0, 1 / (&~/Part/Components/RateOfFireTween/OnValue)]
			RangeLow = 2 //Gives the actual gun some extra to keep firing after the belt runs dry, works with the extra 3 in the splitter
			RangeHigh = 27
			ResourceLevels
			[
				{
					AnimationFiles
					[
						"loaded_bullets1.png"
						"loaded_bullets1-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets2.png"
						"loaded_bullets2-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets3.png"
						"loaded_bullets3-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets4.png"
						"loaded_bullets4-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets5.png"
						"loaded_bullets5-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets6.png"
						"loaded_bullets6-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets7.png"
						"loaded_bullets7-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets8.png"
						"loaded_bullets8-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets9.png"
						"loaded_bullets9-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets10.png"
						"loaded_bullets10-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets11.png"
						"loaded_bullets11-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets12.png"
						"loaded_bullets12-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets13.png"
						"loaded_bullets13-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets14.png"
						"loaded_bullets14-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets15.png"
						"loaded_bullets15-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets16.png"
						"loaded_bullets16-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets17.png"
						"loaded_bullets17-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets18.png"
						"loaded_bullets18-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets19.png"
						"loaded_bullets19-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
				}
			]
		}

		BeltAmmoSpritesRight
		{
			Type = ResourceSprites
			Location = [160/64, 99/64]
			ResourceStorage = BulletSplitterRight
			Layer = "doodads_low"
			AnimationSpeedFactor = RateOfFireTween
			AnimationSpeedFactorRenormalize = [0, 1 / (&~/Part/Components/RateOfFireTween/OnValue)]
			RangeLow = 2 //Gives the actual gun some extra to keep firing after the belt runs dry, works with the extra 3 in the splitter
			RangeHigh = 27
			ResourceLevels
			[
				{
					AnimationFiles
					[
						"loaded_bullets1.png"
						"loaded_bullets1-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets2.png"
						"loaded_bullets2-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets3.png"
						"loaded_bullets3-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets4.png"
						"loaded_bullets4-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets5.png"
						"loaded_bullets5-2.png"
					]
					Size = [1, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets6.png"
						"loaded_bullets6-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets7.png"
						"loaded_bullets7-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets8.png"
						"loaded_bullets8-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets9.png"
						"loaded_bullets9-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets10.png"
						"loaded_bullets10-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets11.png"
						"loaded_bullets11-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets12.png"
						"loaded_bullets12-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets13.png"
						"loaded_bullets13-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets14.png"
						"loaded_bullets14-2.png"
					]
					Size = [1, 2]
					Offset = [0, 0.5]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets15.png"
						"loaded_bullets15-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets16.png"
						"loaded_bullets16-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets17.png"
						"loaded_bullets17-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets18.png"
						"loaded_bullets18-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets19.png"
						"loaded_bullets19-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
				{
					AnimationFiles
					[
						"loaded_bullets20.png"
						"loaded_bullets20-2.png"
					]
					Size = [1, 3]
					Offset = [0, 1]
					AnimationInterval = 1/60
					ClampAnimation = true
					MirrorU = true
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1.5, 3.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1.5, 3.5]
		}
		DestroyedHitEffects
		{
			Type = DeathEffects
			IncludeWhenUnderConstruction = false
			Location = [1.5, 3.5]
			FactorHitEffectsWith = CombinedAmmoStorage
			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 6000
					Radius = 3
					Delay = .05
					FireChancePerNDamage = 50%
					NDamage = 1000
					CrewKillChance = 10%
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 1200
					Radius = 2
					Delay = .05
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
						Crew = false
					}
				}
			]
		}

		HasEnoughAmmoForGraphics
		{
			Type = MultiToggle
			Toggles = [OpenAndHasSomeAmmo, ClosedAndHasFullAmmo]
			Mode = Any
		}
		OpenAndHasSomeAmmo
		{
			Type = MultiToggle
			Toggles = [{Toggle = IsShellFullyClosed, Invert = true}, CombinedAmmoStorage]
			Mode = All
		}
		ClosedAndHasFullAmmo  //Show ammo indicator if we aren't full
		{
			Type = MultiToggle
			Toggles = [IsShellFullyClosed, HasMaxAmmo]
			Mode = All
		}
		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 2.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// Out of ammo.
				{
					Toggle = HasEnoughAmmoForGraphics
					Delay = 1//&~/Part/Components/Turret/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoAmmo
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 6]
			Offset = [0, -0.5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		AmmoCapacity = (&~/Part/Components/AmmoStorageRight/MaxResources) + (&~/Part/Components/AmmoStorageLeft/MaxResources)

		RecAmmo = (&AmmoCapacity) / 2
		RecCrew = (&CrewRequired) + (&RecAmmo)
		ShellPenResist = (&~/Part/Components/DefensiveShellCollider/InitialPenetrationResistance) - 1
		ShellDamageResist = (&~/Part/Components/DefensiveShellCollider/DamageResistances/default) * 100
	}
	StatsByCategory
	[
		{
			NameKey = "StatCategories/BulletChaingun"
			Stats
			{
				RampUpTime = &~/Part/Components/RateOfFireTween/OnTweenDuration
				DamagePerShot = &~/Part/Components/BulletEmitter/HitOperational/HitEffects/0/Damage
				DamagePerSecond = [(&../DamagePerShot) * (&../ROFRange/0), (&../DamagePerShot) * (&../ROFRange/1)]
				DamageRange = [&../DamagePerShot, &../DamagePerSecond/0, &../DamagePerSecond/1]
				ROFRange
				[
					(&~/Part/Components/BulletEmitter/Burst) / (&~/Part/Components/FixedWeaponShooter/FireInterval/BaseValue)
					(&~/Part/Components/BulletEmitter/Burst) / ((&~/Part/Components/FixedWeaponShooter/FireInterval/BaseValue) / (&~/Part/Components/RateOfFireTween/OnValue))
				]
				Range = &~/Part/Components/BulletEmitter/Range
				Arc = deg(&~/Part/Components/Turret/FiringArc)
				Spread = deg(&~/Part/Components/BulletEmitter/Spread/1)
				TurretSpeed = deg(&~/Part/Components/AimingTurretSlider/MatchRotationSpeed)
				ShotSpeed = Infinity
				AmmoPerShot = 1 / (&~/Part/Components/BulletSplitterRight/ToQuantity)
				AmmoPerSecond = [(&../AmmoPerShot) * (&../ROFRange/0), (&../AmmoPerShot) * (&../ROFRange/1)]
				ShotAmmoUsageRange = [&../AmmoPerShot, &../AmmoPerSecond/0, &../AmmoPerSecond/1]
			}
		}
	]
}