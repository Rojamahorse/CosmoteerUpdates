Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/FactoryDiamond"
	IconNameKey = "Parts/FactoryDiamondIcon"
	ID = cosmoteer.factory_diamond // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	EditorGroup = "Production"
	DescriptionKey = "Parts/FactoryDiamondDesc"
	Resources
	[
		[steel, 48]
		[coil2, 118]
		[tristeel, 67]
	]
	Size = [2, 3]
	SelectionPriority = 1
	MaxHealth = 6000
	TypeCategories = [provides_diamonds, uses_carbon, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	AllowedDoorLocations
	[
		[-1, 2]
		[0, 3]
		[1, 3]
		[2, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [42.66, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, CarbonStorage, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		CarbonStorage
		{
			Type = ResourceStorage
			ResourceType = carbon
			MaxResources = 20
			DelayBeforeReadyToUse = 0.7
			UITileRect = [.5 + 7/64, .4 + 7/64, 1 - 14/64, 1 - 14/64]
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/ElementDeliver
			DropResourcesWhenDestroyed = true
			AllowExternalPickupAndDelivery = true
			DeliveryLocation = [1, 2.2]
			PickUpLocation = [1, 2.2]
			ExternalDeliveryLocation = [64/64, 53/64]
			ExternalPickUpLocation = [64/64, 53/64]
		}
		CarbonConsumer
		{
			Type = ResourceConsumer
			ResourceType = carbon
			Storage = CarbonStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}

		DiamondStorage
		{
			Type = TypedResourceGrid
			ResourceType = diamond
			GridRect = [0, 2, 2, 1]
			Layer = "doodads_low"
			SpriteInset = [8/64, 3/64, 8/64, 12/64]
			SuppliesResources = true
			SupplyToggleButtonOffset = [0, -.4]
			ToggleOnResources = &../ResourceConverter/From/0/Quantity
			ToggleOffResources = (&ToggleOnResources) - 1
			RandomSpriteRotation = true
			InitToMaxResources = 0
			AllowExternalPickupAndDelivery = true
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		ResourceConverter
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			From
			[
			    {
			        Storage = CarbonStorage
			        Quantity = 20
			    }
			    {
			        Storage = BatteryStorage
			        Quantity = 1000
			        MinQuantityForConversion = 1
			    }
			]
			ToStorage = DiamondStorage
			ToQuantity = 1
			Interval = 1.3
			CheckResourceLimits = true
		}

		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = ResourceConverter
			Location = [1, 1.5]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "../factory_ammo/bullet_create.wav"
					Volume = .1
					Speed = .5
					SpeedVariation = .05
				}
			]
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Factory
			BuffAmount = 25%
			GridDistance = 1
			OperationalToggle = BatteryStorage
		}

		//BeltSpeedFactor not using this component for because diamond is so fast it doesn't use a factory buff

		Graphics
		{
			Type = Graphics
			Location = [1, 1.5]
			OperationalToggle = IsOperational
			DoodadToggle = ResourceConverter
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 3]
					}
					{
						File = "floor_33.png"
						Size = [2, 3]
					}
					{
						File = "floor_66.png"
						Size = [2, 3]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "doors"
				Offset = [0, -0.25]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"diamond_forging1.png"
							"diamond_forging2.png"
							"diamond_forging3.png"
							"diamond_forging4.png"
							"diamond_forging5.png"
							"diamond_forging6.png"
							"diamond_forging7.png"
							"diamond_forging8.png"
							"diamond_forging9.png"
							"diamond_forging10.png"
							"diamond_forging11.png"
							"diamond_forging12.png"
							"diamond_forging13.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
						AnimationStartTime = WhenSpawned
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"diamond_forging1_33.png"
							"diamond_forging2_33.png"
							"diamond_forging3_33.png"
							"diamond_forging4_33.png"
							"diamond_forging5_33.png"
							"diamond_forging6_33.png"
							"diamond_forging7_33.png"
							"diamond_forging8.png"
							"diamond_forging9.png"
							"diamond_forging10.png"
							"diamond_forging11.png"
							"diamond_forging12.png"
							"diamond_forging13.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
						AnimationStartTime = WhenSpawned
						ClampAnimation = true
					}
					{
						AnimationFiles
						[
							"diamond_forging1_66.png"
							"diamond_forging2_66.png"
							"diamond_forging3_66.png"
							"diamond_forging4_66.png"
							"diamond_forging5_66.png"
							"diamond_forging6_66.png"
							"diamond_forging7_66.png"
							"diamond_forging8.png"
							"diamond_forging9.png"
							"diamond_forging10.png"
							"diamond_forging11.png"
							"diamond_forging12.png"
							"diamond_forging13.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.1
						AnimationStartTime = WhenSpawned
						ClampAnimation = true
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 3]
					}
					{
						File = "walls_33.png"
						Size = [2, 3]
					}
					{
						File = "walls_66.png"
						Size = [2, 3]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 3]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -8/64]//-29/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [4, 4]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5,0,0]
					}
				]
			}
		}

		RoofDoorOpenToggle
		{
			Type = CrewDestinationProximityToggle
			Distance = 3
		}
		RoofDoorSprite
		{
			Type = OpenCloseSprite
			Location = [1, 1.5]
			OperationalToggle = RoofDoorOpenToggle
			Layer = "roofs"
			OpenDamageLevels
			[
				{
					AnimationFiles
					[
						"roof1.png"
						"roof2.png"
						"roof3.png"
						"roof4.png"
						"roof5.png"
						"roof6.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1.png"
						"roof_normals2.png"
						"roof_normals3.png"
						"roof_normals4.png"
						"roof_normals5.png"
						"roof_normals6.png"
					]
					Size = [2, 3]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof1_33.png"
						"roof2_33.png"
						"roof3_33.png"
						"roof4_33.png"
						"roof5_33.png"
						"roof6_33.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1_33.png"
						"roof_normals2_33.png"
						"roof_normals3_33.png"
						"roof_normals4_33.png"
						"roof_normals5_33.png"
						"roof_normals6_33.png"
					]
					Size = [2, 3]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof1_66.png"
						"roof2_66.png"
						"roof3_66.png"
						"roof4_66.png"
						"roof5_66.png"
						"roof6_66.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1_66.png"
						"roof_normals2_66.png"
						"roof_normals3_66.png"
						"roof_normals4_66.png"
						"roof_normals5_66.png"
						"roof_normals6_66.png"
					]
					Size = [2, 3]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
			ClosedDamageLevels
			[
				{
					AnimationFiles
					[
						"roof6.png"
						"roof5.png"
						"roof4.png"
						"roof3.png"
						"roof2.png"
						"roof1.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6.png"
						"roof_normals5.png"
						"roof_normals4.png"
						"roof_normals3.png"
						"roof_normals2.png"
						"roof_normals1.png"
					]
					Size = [2, 3]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof6_33.png"
						"roof5_33.png"
						"roof4_33.png"
						"roof3_33.png"
						"roof2_33.png"
						"roof1_33.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6_33.png"
						"roof_normals5_33.png"
						"roof_normals4_33.png"
						"roof_normals3_33.png"
						"roof_normals2_33.png"
						"roof_normals1_33.png"
					]
					Size = [2, 3]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof6_66.png"
						"roof5_66.png"
						"roof4_66.png"
						"roof3_66.png"
						"roof2_66.png"
						"roof1_66.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6_66.png"
						"roof_normals5_66.png"
						"roof_normals4_66.png"
						"roof_normals3_66.png"
						"roof_normals2_66.png"
						"roof_normals1_66.png"
					]
					Size = [2, 3]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 2]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
					Offset = [-.5, 0]
				}
				{
					File = "batteries2.png"
					Size = [2, 1]
				}
			]
		}

		CarbonSprites
		{
			Type = ResourceSprites
			Location = [1, 1]
			ResourceStorage = CarbonStorage
			Layer = "doodads_low"
			HasZeroResourceSprite = true
			ResourceLevels
			[
				{
					AnimationFiles
					[
						"carbon0-1.png"
						"carbon0-2.png"
						"carbon0-3.png"
						"carbon0-4.png"
						"carbon0-5.png"
						"carbon0-6.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.1
					ClampAnimation = true
				}
				{
					File = "carbon1.png"
					Size = [2, 2]
				}
				{
					File = "carbon2.png"
					Size = [2, 2]
				}
				{
					File = "carbon3.png"
					Size = [2, 2]
				}
				{
					File = "carbon4.png"
					Size = [2, 2]
				}
				{
					File = "carbon5.png"
					Size = [2, 2]
				}
				{
					File = "carbon6.png"
					Size = [2, 2]
				}
				{
					File = "carbon7.png"
					Size = [2, 2]
				}
				{
					File = "carbon8.png"
					Size = [2, 2]
				}
				{
					File = "carbon9.png"
					Size = [2, 2]
				}
				{
					File = "carbon10.png"
					Size = [2, 2]
				}
				{
					File = "carbon11.png"
					Size = [2, 2]
				}
				{
					File = "carbon12.png"
					Size = [2, 2]
				}
				{
					File = "carbon13.png"
					Size = [2, 2]
				}
				{
					File = "carbon14.png"
					Size = [2, 2]
				}
				{
					File = "carbon15.png"
					Size = [2, 2]
				}
				{
					File = "carbon16.png"
					Size = [2, 2]
				}
				{
					File = "carbon17.png"
					Size = [2, 2]
				}
				{
					File = "carbon18.png"
					Size = [2, 2]
				}
				{
					File = "carbon19.png"
					Size = [2, 2]
				}
				{
					AnimationFiles
					[
						"carbon20-1.png"
						"carbon20-2.png"
						"carbon20-3.png"
						"carbon20-4.png"
						"carbon20-5.png"
						"carbon20-6.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.1
					ClampAnimation = true
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1.5]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
					HidesIndicators = [1,2]
				}

				// No carbon.
				{
					Toggle = CarbonStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 3]
		}
	}

	Stats
	{
		DiamondProduction = Infinity //(&~/Part/Components/ResourceConverter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		DiamondCapacity = (&~/Part/Components/DiamondStorage/GridRect/2) * (&~/Part/Components/DiamondStorage/GridRect/3) * (&<./Data/resources/diamond/diamond.rules>/MaxStackSize)
		CarbonCapacity = &~/Part/Components/CarbonStorage/MaxResources
		CarbonPerDiamond = (&~/Part/Components/ResourceConverter/From/0/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		CarbonPerSecond = Infinity //(&~/Part/Components/ResourceConverter/From/0/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		DiamondCarbonUsage = [&../CarbonPerDiamond, &../CarbonPerSecond]
		PowerPerDiamond = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity) / 1000
		PowerPerSecond = Infinity //(&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue) / 1000
		DiamondPowerUsage = [&../PowerPerDiamond, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		FactoryBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		RecPower = 2 //&PowerPerSecond
		RecCrew = (&RecPower) * 4
	}
}