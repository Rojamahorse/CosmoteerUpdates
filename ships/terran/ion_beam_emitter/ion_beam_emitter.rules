Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/IonBeamEmitter"
	IconNameKey = "Parts/IonBeamEmitterIcon"
	ID = cosmoteer.ion_beam_emitter // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [ion_beam]
	EditorGroup = "WeaponsEnergy"
	DescriptionKey = "Parts/IonBeamEmitterDesc"
	Resources
	[
		[steel, 60]
		[coil2, 15]
		[diamond, 1]
	]
	Size = [2, 5]
	PhysicalRect = [0, 1, 2, 4]
	SaveRect = &PhysicalRect
	SelectionPriority = 1
	SelectionTypeByRotation = true
	MaxHealth = 8000
	TypeCategories = [weapon, uses_power, is_crewed, ion, ion_beam_emitter]
	ReceivableBuffs : ^/0/ReceivableBuffs [ElectronBuff]
	BlockedTravelCells
	[
		[0, 1]
		[1, 1]
	]
	AllowedDoorLocations
	[
		[-1, 4]
		[2, 4]
		[0, 5]
		[1, 5]
	]
	ExternalWallsByCell
	[
		{
			Key = [0, 1]
			Value = [TopLeft, Bottom, BottomLeft, Left]
		}
		{
			Key = [1, 1]
			Value = [TopRight, Right, BottomRight, Bottom]
		}
	]
	InternalWallsByCell
	[
		{
			Key = [0, 0]
			Value = [Left, TopLeft, Top, TopRight]
		}
		{
			Key = [1, 0]
			Value = [Right, TopRight, Top, TopLeft]
		}
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [36.8, 92]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 4
		}

		FireModeToggle
		{
			Type = UIToggle
			ToggleID = "fire_mode"
			Default = 1
			ToggledOnChoices = [0, 1, 2]
		}
		AutoTargetToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnModes = [1, 2]
		}
		AutoFireToggle
		{
			Type = ModeToggle
			Mode = FireModeToggle
			OnMode = 2
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 10000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Weapon_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		Weapon
		{
			Type = FixedWeapon
			Location = [1, 1.5]// Relative to upper-left corner of unrotated part.
			Rotation = -90d// Relative to unrotated part.
			OperationalToggle = IsOperational
			AutoFireToggle = AutoFireToggle
			FireInterval = .2
			AIFirepowerRating = &~/Part/StatsByCategory/0/Stats/DamageContinuousNear
			Emitter = BeamEmitter
			ChainFireToggleComponent = IonBeamChainToggle
			ProhibitTargetPartsFilter = &FriendlyPrismFilter // Don't force fire on friendly ion prisms!
			SuppressShipWideExplicitTargetsWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressDirectControlWhenTargetingPartsFilter = &FriendlyPrismFilter
			SuppressFirepowerEstimationWhenTargetingPartsFilter = &FriendlyPrismFilter
			AutoExplicitTargetPartsFilter = &FriendlyPrismFilter
			SaveSelfTargetPartCategories = [ion_beam_prism]
			FirePermissionToggle = FireModeToggle

			FriendlyPrismFilter
			{
				Enemies = false
				Junk = false
				OnlyPartCategories = [ion_beam_prism]
			}

			AutoTarget
			{
				TargetType = ShipParts
				Toggle = AutoTargetToggle
			}

			CoverageLine
			{
				LineSprite
				{
					Texture = &/INDICATORS/RadialGradient
					VertexColor = [255, 255, 255, 191]
					UVRect = [.5, 0, 0, 1]
				}
				LineThickness = 2

				BeginCapSprite : LineSprite
				{
					UVRect = [0, 0, .5, 1]
				}
				BeginCapSize = [1, 2]

				EndCapSprite : LineSprite
				{
					UVRect = [.5, 0, .5, 1]
				}
				EndCapSize = [1, 2]
			}
		}

		BeamEmitter : <./Data/shots/ion_beam/ion_beam.rules>
		{
			Type = BeamEmitter
			ChainedTo = Weapon
			FireTrigger = Weapon
			GetTargetFrom = Weapon
			OperationalToggle = IsOperational
			Duration = .5
			ResourceStorage = BatteryStorage
			ResourcesUsed = 250
			MinResourcesUsed = 1

			BeamMediaEffects : ^/0/BeamMediaEffects
			[
				: /BASE_SOUNDS/AudioExterior
				{
					Sound = "./Data/shots/ion_beam/ion_beam_emit.wav"
					Volume = 1
					MaxConcurrent = 1
					MaxConcurrentVolume = 1
					RampUpTime = .25
					RampDownTime = .25
				}
			]
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [.65, 4.27]
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [1.35, 4.27]
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Weapon_Crew
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				&../../CrewLocation1/Location
				&../../CrewLocation2/Location
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
			]
		}

		Emitter_and_External_Walls_Graphics
		{
			Type = Graphics
			Location = [1, 0.75]
			OperationalToggle = IsOperational
			DoodadToggle = BeamEmitter
			ShowToggledDoodadsWhenNotOperational = false
			Floor
			{
				Layer = "weapons"
				DamageLevels
				[
					{
						File = "emitter.png"
						NormalsFile = "emitter_normals.png"
						Size = [2, 2]
					}
					{
						File = "emitter_33.png"
						NormalsFile = "emitter_normals.png"
						Size = [2, 2]
					}
					{
						File = "emitter_66.png"
						NormalsFile = "emitter_normals.png"
						Size = [2, 2]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"emitter_shooting_on1.png"
							"emitter_shooting_on2.png"
							"emitter_shooting_on3.png"
							"emitter_shooting_on4.png"
							"emitter_shooting_on5.png"
							"emitter_shooting_on6.png"
							"emitter_shooting_on7.png"
							"emitter_shooting_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.05//375
						AnimationStartTime = Zero
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"emitter_idle_on1.png"
							"emitter_idle_on2-8.png"
							"emitter_idle_on3-7.png"
							"emitter_idle_on4-6.png"
							"emitter_idle_on5.png"
							"emitter_idle_on4-6.png"
							"emitter_idle_on3-7.png"
							"emitter_idle_on2-8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.125
						AnimationStartTime = Zero
					}
				]
			}
			Walls
			{
				Layer = "external_walls"
				Offset = [0, 0.5]
				DamageLevels
				[
					{
						File = "external_walls.png"
						NormalsFile = "external_walls_normals.png"
						Size = [2, 1]
					}
					{
						File = "external_walls_33.png"
						NormalsFile = "external_walls_normals_33.png"
						Size = [2, 1]
					}
					{
						File = "external_walls_66.png"
						NormalsFile = "external_walls_normals_66.png"
						Size = [2, 1]
					}
				]
			}
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 3]
			OperationalToggle = IsOperational
			DoodadToggle = BeamEmitter
			ShowToggledDoodadsWhenNotOperational = false
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [2, 4]
					}
					{
						File = "floor_33.png"
						Size = [2, 4]
					}
					{
						File = "floor_66.png"
						Size = [2, 4]
					}
				]
			}
			ToggleOnDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.125]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_shooting_on1.png"
							"doodads_shooting_on2.png"
							"doodads_shooting_on3.png"
							"doodads_shooting_on4.png"
							"doodads_shooting_on5.png"
							"doodads_shooting_on6.png"
							"doodads_shooting_on7.png"
							"doodads_shooting_on8.png"
						]
						Size = [2, 3]
						AnimationInterval = 0.05//375
						AnimationStartTime = Zero
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -0.125]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_idle_on1.png"
							"doodads_idle_on2.png"
							"doodads_idle_on3.png"
							"doodads_idle_on4.png"
							"doodads_idle_on5.png"
							"doodads_idle_on6.png"
							"doodads_idle_on7.png"
							"doodads_idle_on8.png"
						]
						Size = [2, 3]
						AnimationInterval = 0.125
						AnimationStartTime = Zero
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 4]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 4]
					}
					{
						AnimationFiles
						[
							"walls1_33.png"
							"walls2_33.png"
							"walls3_33.png"
							"walls4_33.png"
							"walls5_33.png"
							"walls6_33.png"
							"walls7_33.png"
							"walls8_33.png"
						]
						Size = [2, 4]
						AnimationInterval = 0.1
					}
					{
						AnimationFiles
						[
							"walls1_66.png"
							"walls2_66.png"
							"walls3_66.png"
							"walls4_66.png"
							"walls5_66.png"
							"walls6_66.png"
							"walls7_66.png"
							"walls8_66.png"
						]
						Size = [2, 4]
						AnimationInterval = 0.1
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 4]
					}
					{
						File = "walls_33.png"
						Size = [2, 4]
					}
					{
						File = "walls_66.png"
						Size = [2, 4]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				Offset = [0, -0.5]
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 5]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 5]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals.png"
						Size = [2, 5]

					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_glows.png"
						Size = [2, 4]
					}
					{
						File = "roof_glows_33.png"
						Size = [2, 4]
					}
					{
						File = "roof_glows_66.png"
						Size = [2, 4]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, .22]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 1 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		OperatingHum
		{
			Type = ContinuousEffects
			Location = [1, 2.5]
			OperationalToggle = IsOperational
			MaxMediaEffectsZoom = 4
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "operating.wav"
					Volume = .2
					Speed = 2
					MaxConcurrent = 1
					MaxConcurrentVolume = .2
				}
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1, 2.75]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Offset = [-0.5, -0.5]
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Offset = [0, -0.5]
					Size = [2, 1]
				}
				{
					File = "batteries3.png"
					Offset = [0, -0.5]
					Size = [2, 1]
				}
				{
					File = "batteries4.png"
					Offset = [0, -0.5]
					Size = [2, 1]
				}
				{
					File = "batteries5.png"
					Size = [2, 2]
				}
				{
					File = "batteries6.png"
					Size = [2, 2]
				}
				{
					File = "batteries7.png"
					Size = [2, 2]
				}
				{
					File = "batteries8.png"
					Size = [2, 2]
				}
				{
					File = "batteries9.png"
					Size = [2, 2]
				}
				{
					File = "batteries10.png"
					Size = [2, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 2.5]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1, 2.75]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 3]
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
					HidesIndicators = [1,2]
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					Delay = &~/Part/Components/Weapon/FireInterval
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [2, 5]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &../StatsByCategory/0/Stats/PowerUsageContinuous
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}

	StatsByCategory
	[
		{
			NameKey = "StatCategories/IonBeam"
			Stats
			{
				BaseDamage = &~/Part/Components/BeamEmitter/HitOperational/HitEffects/0/Damage/BaseValue
				DamagePerShotNear = (&BaseDamage) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/0)
				DamagePerShotFar = (&BaseDamage) * (&~/Part/Components/BeamEmitter/HitEffectsScaleOverRange/1)
				HitInterval = &~/Part/Components/BeamEmitter/HitInterval
				DamageContinuousNear = (&DamagePerShotNear) / (&HitInterval)
				DamageContinuousFar = (&DamagePerShotFar) / (&HitInterval)
				Range = &~/Part/Components/BeamEmitter/Range
				Arc = 0
				ShotSpeed = Infinity
				PowerPerShot = (&~/Part/Components/BeamEmitter/ResourcesUsed) / 1000
				PowerUsageContinuous = (&PowerPerShot) / (&~/Part/Components/Weapon/FireInterval)
			}
		}
	]
}