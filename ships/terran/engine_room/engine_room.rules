Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/EngineRoom"
	IconNameKey = "Parts/EngineRoomIcon"
	ID = cosmoteer.engine_room
	EditorGroup = "Flight"
	DescriptionKey = "Parts/EngineRoomDesc"
	Resources
	[
		[steel, 72]
		[coil2, 28]
		[tristeel, 9]
	]
	Size = [3, 3]
	IsRotateable = false
	SelectionPriority = 1
	MaxHealth = 9000
	TypeCategories = [engine_room, uses_power, is_crewed]
	ReceivableBuffs : ^/0/ReceivableBuffs []
	BlockedTravelCells
	[
		[1, 1]
	]
	ForceManhattanPathInPart = true
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, BatteryStorage, PartCrew]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 6
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 4000
		}
		CombinedBatteryStorage
		{
			Type = MultiResourceStorage
			ResourceType = battery
			ResourceStorages = [BatteryStorage]
			ViaBuffs
			{
				OutgoingBuffProviders = [PowerDistributionBuffProvider]
				ComponentIDs = [BatteryStorage, ExtendableBatteryStorage] // ExtendableBatteryStorage is used by rocket thrusters.
			}
			AddMode = PrioritizeLeastResources
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = CombinedBatteryStorage
			DefaultPriority = &/PRIORITIES/Thruster_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		PowerDrain
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			FromStorage = BatteryStorage
			FromQuantity = 100
			MinFromQuantityForConversion = 1
			Interval = 1
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Engine
			BuffAmount = 50%
			GridDistance = 1
			OperationalToggle = IsOperational
		}

		DistributePowerUIToggle
		{
			Type = UIToggle
			ToggleID = "distribute_power"
			Default = 1
		}
		DistributePowerToggle
		{
			Type = MultiToggle
			Toggles = [DistributePowerUIToggle, IsOperational]
			Mode = All
		}
		PowerDistributionBuffProvider
		{
			Type = GridBuffProvider
			BuffType = EnginePowerDistribution
			GridDistance = 1
			OperationalToggle = DistributePowerToggle
		}

		CrewLocation1
		{
			Type = CrewLocation
			Location = [0.47, 1.5]
			Rotation = 90d
		}
		CrewLocation2
		{
			Type = CrewLocation
			Location = [2.53, 1.5]
			Rotation = -90d
		}
		CrewLocation3
		{
			Type = CrewLocation
			Location = [1.5, 0.47]
			Rotation = 180d
		}
		CrewLocation4
		{
			Type = CrewLocation
			Location = [1.5, 2.53]
			Rotation = 0d
		}
		PartCrew
		{
			Type = PartCrew
			Crew = 2
			DefaultPriority = &/PRIORITIES/Thruster_Supply // Needs to be at least as high as the supply priority.
			PrerequisitesBeforeCrewing = [PowerToggle]
			HighPriorityPrerequisites = [BatteryStorage]
			CrewDestinations
			[
				[0.4, 1.5]
				[2.6, 1.5]
				[1.5, 0.4]
				[1.5, 2.6]
			]
			CrewLocations
			[
				CrewLocation1
				CrewLocation2
				CrewLocation3
				CrewLocation4
			]
			SwitchLocationInterval = [5, 10]
		}

		Graphics
		{
			Type = Graphics
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			Floor
			{
				Layer = "floors"
				DamageLevels
				[
					{
						File = "floor.png"
						Size = [3, 3]
					}
					{
						File = "floor_33.png"
						Size = [3, 3]
					}
					{
						File = "floor_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"doodads_on1_33.png"
							"doodads_on2_33.png"
							"doodads_on3_33.png"
							"doodads_on4_33.png"
							"doodads_on5_33.png"
							"doodads_on6_33.png"
							"doodads_on7_33.png"
							"doodads_on8_33.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"doodads_on1_66.png"
							"doodads_on2_66.png"
							"doodads_on3_66.png"
							"doodads_on4_66.png"
							"doodads_on5_66.png"
							"doodads_on6_66.png"
							"doodads_on7_66.png"
							"doodads_on8_66.png"
						]
						Size = [2, 2]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_high"
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 2]
					}
					{
						File = "doodads_off_33.png"
						Size = [2, 2]
					}
					{
						File = "doodads_off_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"lights.png"
							"lights2.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.1
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [3, 3]
					}
					{
						File = "walls_33.png"
						Size = [3, 3]
					}
					{
						File = "walls_66.png"
						Size = [3, 3]
					}
				]
			}
			Roof
			{
				Layer = "roofs"
				DamageLevels
				[
					{
						File = "roof.png"
						NormalsFile = "roof_normals.png"
						Size = [3, 3]
					}
					{
						File = "roof_33.png"
						NormalsFile = "roof_normals_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_66.png"
						NormalsFile = "roof_normals_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"roof_doodads_on1.png"
							"roof_doodads_on2.png"
							"roof_doodads_on3.png"
							"roof_doodads_on4.png"
							"roof_doodads_on5.png"
							"roof_doodads_on6.png"
							"roof_doodads_on7.png"
							"roof_doodads_on8.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"roof_doodads_on1_33.png"
							"roof_doodads_on2_33.png"
							"roof_doodads_on3_33.png"
							"roof_doodads_on4_33.png"
							"roof_doodads_on5_33.png"
							"roof_doodads_on6_33.png"
							"roof_doodads_on7_33.png"
							"roof_doodads_on8_33.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.075
					}
					{
						AnimationFiles
						[
							"roof_doodads_on1_66.png"
							"roof_doodads_on2_66.png"
							"roof_doodads_on3_66.png"
							"roof_doodads_on4_66.png"
							"roof_doodads_on5_66.png"
							"roof_doodads_on6_66.png"
							"roof_doodads_on7_66.png"
							"roof_doodads_on8_66.png"
						]
						Size = [3, 3]
						AnimationInterval = 0.075
					}
				]
			}
			NonOperationalRoofDoodad
			{
				Layer = "roof_doodads"
				DamageLevels
				[
					{
						File = "roof_doodads_off.png"
						Size = [3, 3]
					}
					{
						File = "roof_doodads_off_33.png"
						Size = [3, 3]
					}
					{
						File = "roof_doodads_off_66.png"
						Size = [3, 3]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				DamageLevels
				[
					{
						File = "light_blob.png"
						Size = [3.5, 3.5]
						Z = 2.50 // Controls the "height" of the light for the purposes of normal mapping.
						VertexColor = [255*1.0,116*1.0, 24*1.0]
					}
				]
			}
		}

		EngineHum
		{
			Type = ContinuousEffects
			Location = [1.5, 1.5]
			OperationalToggle = IsOperational
			MaxMediaEffectsZoom = 4
			MediaEffects
			[
				: /COMMON_SOUNDS/ThrusterHum
				{
					Volume = .2
					Speed = 1
					MaxConcurrentVolume = 1
				}
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [1.5, 1.5]
			ResourceStorage = BatteryStorage
			Layer = "doodads_low"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Offset = [-0.5,-0.5]
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Offset = [0,-0.5]
					Size = [2, 1]
				}
				{
					File = "batteries3.png"
					Size = [2, 2]
				}
				{
					File = "batteries4.png"
					Size = [2, 2]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/PowerOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/PowerOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/BigPartDestroyed
			Location = [1.5, 1.5]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1.5, 1.5]
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
					HidesIndicators = [1,2]
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}

				// No crew.
				{
					Toggle = PartCrew
					AtlasSprite
					{
						File = &/INDICATORS/NoCrew
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			File = "blueprints.png"
			Size = [3, 3]
		}
	}

	Stats
	{
		CrewRequired = &~/Part/Components/PartCrew/Crew
		ThrusterBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100
		PowerUsageContinuous = (&~/Part/Components/PowerDrain/FromQuantity) / (&~/Part/Components/PowerDrain/Interval) / 1000
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000

		RecPower = &PowerUsageContinuous
		RecCrew = (&CrewRequired) + (&RecPower) * 4
	}
}