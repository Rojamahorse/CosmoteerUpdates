Part : <../base_part_terran.rules>/Part
{
	NameKey = "Parts/FactoryAmmo"
	IconNameKey = "Parts/FactoryAmmoIcon"
	ID = cosmoteer.factory_ammo // Part IDs must always be in the form of "author_name.part_name". If making your own mod, do *not* use "cosmoteer" as your author name, because it may conflict with future vanilla parts.
	OtherIDs = [ammo_supply, ammo_factory, cosmoteer.ammo_factory]
	EditorGroup = "Production"
	DescriptionKey = "Parts/FactoryAmmoDesc"
	Resources
	[
		[steel, 32]
		[coil, 24]
		[tristeel, 4]
	]
	Size = [2, 2]
	IsFlippable = true
	SelectionPriority = 1
	MaxHealth = 4000
	TypeCategories = [provides_ammo, uses_sulfur, uses_power]
	ReceivableBuffs : ^/0/ReceivableBuffs [Factory]
	AllowedDoorLocations
	[
		[-1, 1]
		[2, 1]
		[0, 2]
		[1, 2]
	]
	EditorIcon
	{
		Texture
		{
			File = "icon.png"
			SampleMode = Linear
		}
		Size = [64, 64]
	}
	Components : ^/0/Components
	{
		IsOperational
		{
			Type = MultiToggle
			Toggles = [PowerToggle, SulfurSplitter, BatteryStorage]
			Mode = All
		}

		PowerToggle
		{
			Type = UIToggle
			ToggleID = "on_off"
			Default = 1
			RequiresCommand = false
		}

		CommandConsumer
		{
			Type = CommandConsumer
			OperationalToggle = PowerToggle
			CommandPoints = 1
		}

		SulfurStorage
		{
			Type = TypedResourceGrid
			ResourceType = sulfur
			GridRect = [0, 1, 1, 1]
			Layer = "doodads_low"
			SpriteInset = [12/64, 4/64, 6/64, 11/64]
			AllowExternalPickupAndDelivery = true
		}
		SulfurConsumer
		{
			Type = TypedResourceGridConsumer
			ResourceType = sulfur
			Storage = SulfurStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			OperationalToggle = PowerToggle
			ConsumptionToggleButtonOffset = [0, -.4]
		}
		SulfurSplitter
		{
		    Type = InlineResourceConverter
		    ResourceType = sulfur
		    FromStorage = SulfurStorage
		    FromQuantity = 1
		    ToQuantity = 20
		}

		AmmoStorage
		{
			Type = TypedResourceGrid
			ResourceType = bullet
			GridRect = [1, 1, 1, 1]
			Layer = "doodads_low"
			SpriteInset = [6/64, 4/64, 12/64, 11/64]
			SuppliesResources = true
			SupplyToggleButtonOffset = [0, -.4]
			InitToMaxResources = 0
			AllowExternalPickupAndDelivery = true
		}

		BatteryStorage
		{
			Type = ResourceStorage
			ResourceType = battery
			MaxResources = 2000
			ReceiveResourceMediaEffects = &/COMMON_EFFECTS/PowerDeliver
		}
		BatteryConsumer
		{
			Type = ResourceConsumer
			ResourceType = battery
			Storage = BatteryStorage
			DefaultPriority = &/PRIORITIES/Factory_Supply
			ResupplyThreshold = 500
			OperationalToggle = PowerToggle
		}

		ResourceConverter
		{
			Type = ResourceConverter
			OperationalToggle = IsOperational
			From
			[
			    {
			        Storage = SulfurSplitter
			        Quantity = 1
			    }
			    {
			        Storage = BatteryStorage
			        Quantity = 40
			        MinQuantityForConversion = 1
			    }
			]
			ToStorage = AmmoStorage
			ToQuantity = 1
			Interval = { BaseValue=0.5; BuffType=Factory; BuffMode=Divide; }
			CheckResourceLimits = true
		}

		ConvertEffects
		{
			Type = TriggeredEffects
			Trigger = ResourceConverter
			Location = [1, 1]
			MediaEffects
			[
				: /BASE_SOUNDS/AudioInterior
				{
					Sound = "bullet_create.wav"
					Volume = .075
					SpeedVariation = .1
				}
			]
		}

		BuffProvider
		{
			Type = GridBuffProvider
			BuffType = Factory
			BuffAmount = 25%
			GridDistance = 1
			OperationalToggle = BatteryStorage
		}

		SulfurSprites
		{
			Type = ResourceSprites
			Location = [.5-8/64, 0.5+2/64]
			ResourceStorage = SulfurSplitter
			Layer = "doodads_high"
			Modulus = &../SulfurSplitter/ToQuantity
			AnimationToggle = ResourceConverter
			ResourceLevels
			[
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur1-2.png"
						"./Data/ships/terran/factory_he/sulfur1-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur2-2.png"
						"./Data/ships/terran/factory_he/sulfur2-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur3-2.png"
						"./Data/ships/terran/factory_he/sulfur3-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur4-2.png"
						"./Data/ships/terran/factory_he/sulfur4-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur5-2.png"
						"./Data/ships/terran/factory_he/sulfur5-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur6-2.png"
						"./Data/ships/terran/factory_he/sulfur6-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur7-2.png"
						"./Data/ships/terran/factory_he/sulfur7-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur8-2.png"
						"./Data/ships/terran/factory_he/sulfur8-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur9-2.png"
						"./Data/ships/terran/factory_he/sulfur9-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur10-2.png"
						"./Data/ships/terran/factory_he/sulfur10-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur11-2.png"
						"./Data/ships/terran/factory_he/sulfur11-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur12-2.png"
						"./Data/ships/terran/factory_he/sulfur12-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur13-2.png"
						"./Data/ships/terran/factory_he/sulfur13-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur14-2.png"
						"./Data/ships/terran/factory_he/sulfur14-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur15-2.png"
						"./Data/ships/terran/factory_he/sulfur15-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur16-2.png"
						"./Data/ships/terran/factory_he/sulfur16-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur17-2.png"
						"./Data/ships/terran/factory_he/sulfur17-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur18-2.png"
						"./Data/ships/terran/factory_he/sulfur18-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
				{
					AnimationFiles
					[
						"./Data/ships/terran/factory_he/sulfur19-2.png"
						"./Data/ships/terran/factory_he/sulfur19-1.png"
					]
					Size = [1, 1]
					AnimationInterval = 0.075
				}
			]
		}

		IdleDoodaddAndDamageLevels_Graphics
		{
			Type = Graphics
			Location = [1, 40/64]
			OperationalToggle = IsOperational
			DoodadToggle = ResourceConverter
			ToggleOnDoodad
			{
				Layer = "walls"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_waste_on1.png"
							"doodads_waste_on2.png"
							"doodads_waste_on3.png"
							"doodads_waste_on4.png"
						]
						Size = [1, 1]
						Offset = [-.5, -8/64]
						AnimationInterval = 0.0625
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"doodads_waste_on1_33.png"
							"doodads_waste_on2_33.png"
							"doodads_waste_on3_33.png"
							"doodads_waste_on4_33.png"
							"doodads_waste_on5_33.png"
							"doodads_waste_on6_33.png"
							"doodads_waste_on7_33.png"
							"doodads_waste_on8_33.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.0625
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"doodads_waste_on1_66.png"
							"doodads_waste_on2_66.png"
							"doodads_waste_on3_66.png"
							"doodads_waste_on4_66.png"
							"doodads_waste_on5_66.png"
							"doodads_waste_on6_66.png"
							"doodads_waste_on7_66.png"
							"doodads_waste_on8_66.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.0625
						AnimationStartTime = WhenSpawned
					}
				]
			}
			ToggleOffDoodad
			{
				Layer = "walls"
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_idle1.png"
							"doodads_idle2.png"
							"doodads_idle3.png"
							"doodads_idle2.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.125
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"doodads_idle1_33.png"
							"doodads_idle2_33.png"
							"doodads_idle3_33.png"
							"doodads_idle4_33.png"
							"doodads_idle5_33.png"
							"doodads_idle6_33.png"
							"doodads_idle7_33.png"
							"doodads_idle8_33.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.0625
						AnimationStartTime = WhenSpawned
					}
					{
						AnimationFiles
						[
							"doodads_idle1_66.png"
							"doodads_idle2_66.png"
							"doodads_idle3_66.png"
							"doodads_idle4_66.png"
							"doodads_idle5_66.png"
							"doodads_idle6_66.png"
							"doodads_idle7_66.png"
							"doodads_idle8_66.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.0625
						AnimationStartTime = WhenSpawned
					}
				]
			}
		}

		FloorSprite
		{
			Type = Sprite
			OnlyWithFlip = false
			Location = [1, 1]
			Layer = "floors"
			DamageLevels
			[
				{
					File = "floor.png"
					Size = [2, 2]
				}
				{
					File = "floor_33.png"
					Size = [2, 2]
				}
				{
					File = "floor_66.png"
					Size = [2, 2]
				}
			]
		}
		FloorSpriteFlipped
		{
			Type = Sprite
			OnlyWithFlip = true
			Location = [1, 1]
			Layer = "floors"
			DamageLevels
			[
				{
					File = "floor_flipped.png"
					Size = [2, 2]
				}
				{
					File = "floor_flipped_33.png"
					Size = [2, 2]
				}
				{
					File = "floor_flipped_66.png"
					Size = [2, 2]
				}
			]
		}

		BeltSpeedFactor
		{
			Type = BuffableValue
			Value = { BaseValue=1; BuffType=Factory; BuffMode=Multiply; }
		}

		Graphics
		{
			Type = Graphics
			Location = [1, 1]
			OperationalToggle = IsOperational
			AnimationToggle = ResourceConverter
			AnimationSpeedFactor = BeltSpeedFactor
			OperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -24/64]
				DamageLevels
				[
					{
						AnimationFiles
						[
							"doodads_on1.png"
							"doodads_on2.png"
							"doodads_on3.png"
							"doodads_on4.png"
							"doodads_on5.png"
							"doodads_on6.png"
							"doodads_on7.png"
							"doodads_on8.png"
						]
						Size = [2, 1]
						AnimationInterval = 0.0625
					}
				]
			}
			NonOperationalDoodad
			{
				Layer = "doodads_low"
				Offset = [0, -24/64]
				DamageLevels
				[
					{
						File = "doodads_off.png"
						Size = [2, 1]
					}
				]
			}
			OperationalLighting
			{
				Layer = "lights_add"
				DamageLevels
				[
					{
						File = "lights.png"
						Size = [2, 2]
					}
				]
			}
			Walls
			{
				Layer = "walls"
				DamageLevels
				[
					{
						File = "walls.png"
						Size = [2, 2]
					}
					{
						File = "walls_33.png"
						Size = [2, 2]
					}
					{
						File = "walls_66.png"
						Size = [2, 2]
					}
				]
			}
			OperationalRoofLighting
			{
				Layer = "roof_lights_fancy"
				Offset = [0, -17/64]
				DamageLevels
				[
					{
						File = "./Data/ships/common/light_blob.png"
						Size = [3, 3]
						Z = 0.5 // Controls the "height" of the light for the purposes of normal mapping. Set to -1 (or any negative number) to disable normal lighting for this light.
						VertexColor = [255*1.5, 0, 0]
					}
				]
			}
		}

		RoofDoorOpenToggle
		{
			Type = CrewDestinationProximityToggle
			Distance = 3
		}
		RoofDoorSprite
		{
			Type = OpenCloseSprite
			Location = [1, 1]
			OperationalToggle = RoofDoorOpenToggle
			Layer = "roofs"
			OpenDamageLevels
			[
				{
					AnimationFiles
					[
						"roof1.png"
						"roof2.png"
						"roof3.png"
						"roof4.png"
						"roof5.png"
						"roof6.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1.png"
						"roof_normals2.png"
						"roof_normals3.png"
						"roof_normals4.png"
						"roof_normals5.png"
						"roof_normals6.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof1_33.png"
						"roof2_33.png"
						"roof3_33.png"
						"roof4_33.png"
						"roof5_33.png"
						"roof6_33.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1_33.png"
						"roof_normals2_33.png"
						"roof_normals3_33.png"
						"roof_normals4_33.png"
						"roof_normals5_33.png"
						"roof_normals6_33.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof1_66.png"
						"roof2_66.png"
						"roof3_66.png"
						"roof4_66.png"
						"roof5_66.png"
						"roof6_66.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals1_66.png"
						"roof_normals2_66.png"
						"roof_normals3_66.png"
						"roof_normals4_66.png"
						"roof_normals5_66.png"
						"roof_normals6_66.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
			ClosedDamageLevels
			[
				{
					AnimationFiles
					[
						"roof6.png"
						"roof5.png"
						"roof4.png"
						"roof3.png"
						"roof2.png"
						"roof1.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6.png"
						"roof_normals5.png"
						"roof_normals4.png"
						"roof_normals3.png"
						"roof_normals2.png"
						"roof_normals1.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof6_33.png"
						"roof5_33.png"
						"roof4_33.png"
						"roof3_33.png"
						"roof2_33.png"
						"roof1_33.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6_33.png"
						"roof_normals5_33.png"
						"roof_normals4_33.png"
						"roof_normals3_33.png"
						"roof_normals2_33.png"
						"roof_normals1_33.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
				{
					AnimationFiles
					[
						"roof6_66.png"
						"roof5_66.png"
						"roof4_66.png"
						"roof3_66.png"
						"roof2_66.png"
						"roof1_66.png"
					]
					NormalsAnimationFiles
					[
						"roof_normals6_66.png"
						"roof_normals5_66.png"
						"roof_normals4_66.png"
						"roof_normals3_66.png"
						"roof_normals2_66.png"
						"roof_normals1_66.png"
					]
					Size = [2, 2]
					AnimationInterval = 0.06
					AnimationStartTime = MinValue
					ClampAnimation = true
				}
			]
		}

		BatterySprites
		{
			Type = ResourceSprites
			Location = [0.625, 1]
			ResourceStorage = BatteryStorage
			Layer = "doodads_high"
			ResourceLevels
			[
				{
					File = "batteries1.png"
					Size = [1, 1]
				}
				{
					File = "batteries2.png"
					Size = [1, 1]
				}
			]
		}

		OperationEffects
		{
			Type = ToggleEffects
			Location = [1, 1]
			Toggle = IsOperational
			ToggledOnMediaEffects = &/COMMON_EFFECTS/MachinesOn
			ToggledOffMediaEffects = &/COMMON_EFFECTS/MachinesOff
		}

		DestroyedEffects
		{
			Type = DeathEffects
			MediaEffects = &/COMMON_EFFECTS/MedPartDestroyed
			Location = [1, 1]

			HitEffects
			[
				{
					Type = ExplosiveDamage
					TotalDamage = 40000
					Radius = 4
					Delay = .05
					FireChancePerNDamage = 100%
					NDamage = 1000
					CrewKillChance = 50%
					Filter
					{
						OperationalHealth = true
						StructuralHealth = false
						Friendlies = true
					}
				}
				{
					Type = ExplosiveDamage
					TotalDamage = 11250
					Radius = 3
					Delay = .05
					Filter
					{
						OperationalHealth = false
						StructuralHealth = true
						Friendlies = true
						Crew = false
					}
				}
			]
		}

		Indicators
		{
			Type = IndicatorSprites
			Location = [1, 1]
			Layer = "indicators"
			Indicators
			[
				// Turned off.
				{
					Toggle = PowerToggle
					AtlasSprite
					{
						File = &/INDICATORS/PowerOff
						Size = [1, 1]
					}
				}

				// No sulfur.
				{
					Toggle = SulfurSplitter
					AtlasSprite
					{
						File = &/INDICATORS/NoResource
						Size = [1, 1]
					}
				}

				// Out of power.
				{
					Toggle = BatteryStorage
					AtlasSprite
					{
						File = &/INDICATORS/NoPower
						Size = [1, 1]
					}
				}
			]
		}

		Blueprints
		{
			Type = BlueprintSprite
			OnlyWithFlip = false
			File = "blueprints.png"
			Size = [2, 2]
		}
		BlueprintsFlipped
		{
			Type = BlueprintSprite
			OnlyWithFlip = true
			File = "blueprints_flipped.png"
			Size = [2, 2]
		}
	}

	Stats
	{
		AmmoProduction = (&~/Part/Components/ResourceConverter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		AmmoCapacity = (&~/Part/Components/AmmoStorage/GridRect/2) * (&~/Part/Components/AmmoStorage/GridRect/3) * (&<./Data/resources/bullet/bullet.rules>/MaxStackSize)
		SulfurCapacity = (&~/Part/Components/SulfurStorage/GridRect/2) * (&~/Part/Components/SulfurStorage/GridRect/3) * (&<./Data/resources/sulfur/sulfur.rules>/MaxStackSize)
		SulfurPerAmmo = (&~/Part/Components/SulfurSplitter/FromQuantity) / (&~/Part/Components/SulfurSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/ToQuantity)
		SulfurPerSecond = (&~/Part/Components/SulfurSplitter/FromQuantity) / (&~/Part/Components/SulfurSplitter/ToQuantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue)
		AmmoSulfurUsage = [&../SulfurPerAmmo, &../SulfurPerSecond]
		PowerPerAmmo = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/ToQuantity) / 1000
		PowerPerSecond = (&~/Part/Components/ResourceConverter/From/1/Quantity) / (&~/Part/Components/ResourceConverter/Interval/BaseValue) / 1000
		AmmoPowerUsage = [&../PowerPerAmmo, &../PowerPerSecond]
		PowerCapacity = (&~/Part/Components/BatteryStorage/MaxResources) / 1000
		FactoryBuff = (&~/Part/Components/BuffProvider/BuffAmount) * 100

		RecPower = &PowerPerSecond
		RecCrew = (&RecPower) * 4
	}
}